"""
Script pour analyser sp√©cifiquement la Commande 12 et comprendre pourquoi elle n'appara√Æt pas.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from commande.models import Commande, EtatCommande, Operation, EnumEtatCmd
from parametre.models import Operateur
from django.utils import timezone
from datetime import timedelta

def analyser_commande_12():
    """
    Analyse sp√©cifiquement la Commande 12 pour comprendre le probl√®me.
    """
    print("üîç Analyse sp√©cifique de la Commande 12")
    print("=" * 60)
    
    # R√©cup√©rer la Commande 12
    commande_12 = Commande.objects.filter(id_yz=12).first()
    
    if not commande_12:
        print("‚ùå Commande 12 non trouv√©e")
        return
    
    print(f"‚úÖ Commande 12 trouv√©e: {commande_12.num_cmd}")
    
    # R√©cup√©rer un op√©rateur de pr√©paration
    operateur_prepa = Operateur.objects.filter(
        type_operateur='PREPARATION',
        actif=True
    ).first()
    
    if not operateur_prepa:
        print("‚ùå Aucun op√©rateur de pr√©paration actif trouv√©")
        return
    
    print(f"‚úÖ Op√©rateur de pr√©paration: {operateur_prepa.prenom} {operateur_prepa.nom}")
    
    # 1. Analyser tous les √©tats de la commande
    print("\n1. Analyse de tous les √©tats de la commande:")
    
    etats_commande = commande_12.etats.all().order_by('date_debut')
    
    for i, etat in enumerate(etats_commande):
        status = "üü¢ ACTIF" if not etat.date_fin else "‚ö´ TERMIN√â"
        print(f"   {i+1}. {etat.enum_etat.libelle} ({etat.date_debut.strftime('%d/%m/%Y %H:%M')}) {status}")
        if etat.date_fin:
            print(f"      Termin√© le: {etat.date_fin.strftime('%d/%m/%Y %H:%M')}")
        print(f"      Op√©rateur: {etat.operateur.prenom} {etat.operateur.nom} ({etat.operateur.type_operateur})")
    
    # 2. V√©rifier l'op√©ration de renvoi
    print("\n2. V√©rification de l'op√©ration de renvoi:")
    
    operation_renvoi = Operation.objects.filter(
        commande=commande_12,
        type_operation='RENVOI_PREPARATION'
    ).first()
    
    if operation_renvoi:
        print(f"   ‚úÖ Op√©ration de renvoi trouv√©e:")
        print(f"      ID: {operation_renvoi.id}")
        print(f"      Date: {operation_renvoi.date_operation.strftime('%d/%m/%Y %H:%M')}")
        print(f"      Op√©rateur: {operation_renvoi.operateur.prenom} {operation_renvoi.operateur.nom}")
    else:
        print("   ‚ùå Aucune op√©ration de renvoi trouv√©e")
    
    # 3. V√©rifier l'affectation actuelle
    print("\n3. V√©rification de l'affectation actuelle:")
    
    etat_actuel = commande_12.etats.filter(
        enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        operateur=operateur_prepa,
        date_fin__isnull=True
    ).first()
    
    if etat_actuel:
        print(f"   ‚úÖ √âtat actuel: {etat_actuel.enum_etat.libelle}")
        print(f"      Date d√©but: {etat_actuel.date_debut.strftime('%d/%m/%Y %H:%M')}")
        print(f"      Op√©rateur: {etat_actuel.operateur.prenom} {etat_actuel.operateur.nom}")
    else:
        print("   ‚ùå Pas d'√©tat actuel affect√© √† cet op√©rateur")
    
    # 4. V√©rifier les √©tats ult√©rieurs probl√©matiques
    print("\n4. V√©rification des √©tats ult√©rieurs probl√©matiques:")
    
    if etat_actuel:
        etats_ult√©rieurs_problematiques = []
        
        for etat in etats_commande:
            if (etat.date_debut > etat_actuel.date_debut and 
                etat.enum_etat.libelle in ['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']):
                etats_ult√©rieurs_problematiques.append(etat)
        
        if etats_ult√©rieurs_problematiques:
            print(f"   ‚ö†Ô∏è {len(etats_ult√©rieurs_problematiques)} √©tats ult√©rieurs probl√©matiques trouv√©s:")
            for etat in etats_ult√©rieurs_problematiques:
                print(f"      - {etat.enum_etat.libelle} ({etat.date_debut.strftime('%d/%m/%Y %H:%M')})")
            print("   ‚ùå La commande sera ignor√©e par le filtre 'renvoyees_logistique'")
        else:
            print("   ‚úÖ Aucun √©tat ult√©rieur probl√©matique trouv√©")
    
    # 5. Simuler la logique de filtrage
    print("\n5. Simulation de la logique de filtrage 'renvoyees_logistique':")
    
    if etat_actuel:
        # V√©rifier s'il y a des √©tats ult√©rieurs probl√©matiques
        a_etats_ult√©rieurs_problematiques = False
        for etat in etats_commande:
            if (etat.date_debut > etat_actuel.date_debut and 
                etat.enum_etat.libelle in ['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']):
                a_etats_ult√©rieurs_problematiques = True
                break
        
        if a_etats_ult√©rieurs_problematiques:
            print("   ‚ùå La commande sera ignor√©e (√©tats ult√©rieurs probl√©matiques)")
        else:
            # V√©rifier les op√©rations de renvoi
            if operation_renvoi:
                print("   ‚úÖ La commande sera incluse (op√©ration de renvoi trouv√©e)")
            else:
                # V√©rifier l'√©tat pr√©c√©dent
                etat_precedent_livraison = None
                for etat in reversed(etats_commande):
                    if etat.date_fin and etat.date_fin < etat_actuel.date_debut:
                        if etat.enum_etat.libelle == 'En cours de livraison':
                            etat_precedent_livraison = etat
                            break
                
                if etat_precedent_livraison:
                    print(f"   ‚úÖ La commande sera incluse (√©tat pr√©c√©dent: {etat_precedent_livraison.enum_etat.libelle})")
                else:
                    print("   ‚ùå La commande ne sera pas incluse (aucun crit√®re rempli)")
    else:
        print("   ‚ùå La commande ne sera pas incluse (pas d'√©tat actuel)")
    
    # 6. Conclusion et solution
    print("\n6. Conclusion et solution:")
    
    if etat_actuel and operation_renvoi:
        # La commande a une op√©ration de renvoi mais est ignor√©e √† cause des √©tats ult√©rieurs
        print("   üîß SOLUTION: Modifier la logique de filtrage pour ignorer les √©tats ult√©rieurs")
        print("   quand il y a une op√©ration de renvoi explicite.")
        print("   La logique actuelle est trop restrictive.")
    else:
        print("   ‚ùå La commande ne remplit pas les crit√®res de base.")
    
    print("\n" + "=" * 60)
    print("‚úÖ ANALYSE TERMIN√âE")
    print("=" * 60)

if __name__ == "__main__":
    analyser_commande_12() 