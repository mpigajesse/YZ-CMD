"""
Script de diagnostic pour analyser le probl√®me de filtrage dans l'interface de pr√©paration.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from commande.models import Commande, EtatCommande, Operation, EnumEtatCmd
from parametre.models import Operateur
from django.utils import timezone
from datetime import timedelta
from django.db.models import F

def diagnostic_filtrage_preparation():
    """
    Diagnostic du probl√®me de filtrage dans l'interface de pr√©paration.
    """
    print("üîç Diagnostic du filtrage dans l'interface de pr√©paration")
    print("=" * 60)
    
    # R√©cup√©rer un op√©rateur de pr√©paration
    operateur_prepa = Operateur.objects.filter(
        type_operateur='PREPARATION',
        actif=True
    ).first()
    
    if not operateur_prepa:
        print("‚ùå Aucun op√©rateur de pr√©paration actif trouv√©")
        return
    
    print(f"‚úÖ Op√©rateur de pr√©paration: {operateur_prepa.prenom} {operateur_prepa.nom}")
    
    # 1. Analyser toutes les commandes affect√©es √† cet op√©rateur
    print("\n1. Analyse de toutes les commandes affect√©es:")
    
    commandes_affectees = Commande.objects.filter(
        etats__enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).select_related('client', 'ville', 'ville__region').prefetch_related('etats').distinct()
    
    print(f"   - {commandes_affectees.count()} commandes affect√©es √† {operateur_prepa.prenom}")
    
    # 2. Analyser chaque commande en d√©tail
    print("\n2. Analyse d√©taill√©e de chaque commande:")
    
    commandes_renvoyees_logistique = []
    commandes_livrees_partiellement = []
    commandes_autres = []
    
    for cmd in commandes_affectees:
        print(f"\n   üì¶ Commande {cmd.id_yz} ({cmd.num_cmd}):")
        
        # R√©cup√©rer tous les √©tats de la commande
        etats_commande = cmd.etats.all().order_by('date_debut')
        
        print(f"      √âtats de la commande:")
        for etat in etats_commande:
            status = "üü¢ ACTIF" if not etat.date_fin else "‚ö´ TERMIN√â"
            print(f"        - {etat.enum_etat.libelle} ({etat.date_debut.strftime('%d/%m/%Y %H:%M')}) {status}")
            if etat.date_fin:
                print(f"          Termin√© le: {etat.date_fin.strftime('%d/%m/%Y %H:%M')}")
        
        # Trouver l'√©tat actuel
        etat_actuel = None
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            print(f"      √âtat actuel: {etat_actuel.enum_etat.libelle}")
            
            # V√©rifier les op√©rations de renvoi
            operation_renvoi = Operation.objects.filter(
                commande=cmd,
                type_operation='RENVOI_PREPARATION'
            ).first()
            
            if operation_renvoi:
                print(f"      üîÑ Op√©ration de renvoi trouv√©e: {operation_renvoi.date_operation.strftime('%d/%m/%Y %H:%M')}")
                commandes_renvoyees_logistique.append(cmd)
                continue
            
            # V√©rifier l'√©tat pr√©c√©dent
            etat_precedent = None
            for etat in reversed(etats_commande):
                if etat.date_fin and etat.date_fin < etat_actuel.date_debut:
                    if etat.enum_etat.libelle not in ['√Ä imprimer', 'En pr√©paration']:
                        etat_precedent = etat
                        break
            
            if etat_precedent:
                print(f"      ‚¨ÖÔ∏è √âtat pr√©c√©dent: {etat_precedent.enum_etat.libelle}")
                
                if etat_precedent.enum_etat.libelle == 'En cours de livraison':
                    print(f"      üöõ Commande renvoy√©e depuis la logistique")
                    commandes_renvoyees_logistique.append(cmd)
                elif etat_precedent.enum_etat.libelle == 'Livr√©e Partiellement':
                    print(f"      ‚ö†Ô∏è Commande livr√©e partiellement")
                    commandes_livrees_partiellement.append(cmd)
                else:
                    print(f"      üìã Commande normale")
                    commandes_autres.append(cmd)
            else:
                print(f"      ‚ùì Aucun √©tat pr√©c√©dent trouv√©")
                commandes_autres.append(cmd)
        
        # V√©rifier si c'est une commande de renvoi (livraison partielle)
        if cmd.num_cmd and cmd.num_cmd.startswith('RENVOI-'):
            print(f"      üîÑ Commande de renvoi d√©tect√©e (livraison partielle)")
            commandes_livrees_partiellement.append(cmd)
    
    # 3. R√©sum√© des cat√©gories
    print("\n3. R√©sum√© des cat√©gories:")
    print(f"   - Commandes renvoy√©es par logistique: {len(commandes_renvoyees_logistique)}")
    print(f"   - Commandes livr√©es partiellement: {len(commandes_livrees_partiellement)}")
    print(f"   - Autres commandes: {len(commandes_autres)}")
    
    # 4. V√©rifier les commandes probl√©matiques
    print("\n4. V√©rification des commandes probl√©matiques:")
    
    for cmd in commandes_renvoyees_logistique:
        # V√©rifier si la commande a des √©tats ult√©rieurs probl√©matiques
        etats_ult√©rieurs = cmd.etats.filter(
            date_debut__gt=etat_actuel.date_debut,
            enum_etat__libelle__in=['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']
        ).order_by('date_debut')
        
        if etats_ult√©rieurs.exists():
            print(f"   ‚ö†Ô∏è Commande {cmd.id_yz} ({cmd.num_cmd}):")
            print(f"      √âtat actuel: {etat_actuel.enum_etat.libelle}")
            print(f"      √âtats ult√©rieurs probl√©matiques:")
            for etat in etats_ult√©rieurs:
                print(f"        - {etat.enum_etat.libelle} ({etat.date_debut.strftime('%d/%m/%Y %H:%M')})")
    
    # 5. Proposer une correction
    print("\n5. Proposition de correction:")
    print("   Le probl√®me vient du fait que le filtre ne v√©rifie que l'√©tat actuel")
    print("   mais ne v√©rifie pas si la commande a des √©tats ult√©rieurs.")
    print("   Il faut exclure les commandes qui ont des √©tats ult√©rieurs probl√©matiques.")
    
    # 6. Test de la correction
    print("\n6. Test de la correction:")
    
    # R√©cup√©rer les commandes avec le filtre corrig√©
    commandes_corrigees = Commande.objects.filter(
        etats__enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).exclude(
        # Exclure les commandes qui ont des √©tats ult√©rieurs probl√©matiques
        etats__enum_etat__libelle__in=['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison'],
        etats__date_debut__gt=F('etats__date_debut')
    ).distinct()
    
    print(f"   - Commandes apr√®s correction: {commandes_corrigees.count()}")
    
    print("\n" + "=" * 60)
    print("‚úÖ DIAGNOSTIC TERMIN√â")
    print("=" * 60)

if __name__ == "__main__":
    diagnostic_filtrage_preparation() 