#!/usr/bin/env python
"""
Script pour supprimer toutes les tables de la base de donn√©es PostgreSQL
ATTENTION: Ce script supprime TOUTES les donn√©es sans possibilit√© de r√©cup√©ration !
"""

import os
import sys
import django
from pathlib import Path

# Ajouter le r√©pertoire du projet au path Python
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.db import connection
from django.conf import settings

def delete_all_tables():
    """
    Supprime toutes les tables de la base de donn√©es PostgreSQL
    """
    print("üö® ATTENTION: Ce script va supprimer TOUTES les tables de la base de donn√©es !")
    print("üìä Base de donn√©es:", settings.DATABASES['default']['NAME'])
    print("üè† H√¥te:", settings.DATABASES['default']['HOST'])
    print("üë§ Utilisateur:", settings.DATABASES['default']['USER'])
    
    confirmation = input("\n‚ùì √ätes-vous S√õR de vouloir continuer ? (tapez 'OUI' pour confirmer): ")
    
    if confirmation != 'OUI':
        print("‚ùå Op√©ration annul√©e.")
        return
    
    try:
        with connection.cursor() as cursor:
            print("\nüîÑ D√©but de la suppression des tables...")
            
            # D√©sactiver les contraintes de cl√©s √©trang√®res
            cursor.execute("SET session_replication_role = replica;")
            print("‚úÖ Contraintes de cl√©s √©trang√®res d√©sactiv√©es")
            
            # R√©cup√©rer toutes les tables
            cursor.execute("""
                SELECT tablename 
                FROM pg_tables 
                WHERE schemaname = 'public' 
                AND tablename NOT LIKE 'pg_%'
                ORDER BY tablename;
            """)
            
            tables = [row[0] for row in cursor.fetchall()]
            print(f"üìã {len(tables)} tables trouv√©es:")
            
            for table in tables:
                print(f"   - {table}")
            
            # Supprimer toutes les tables
            for table in tables:
                try:
                    cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE;")
                    print(f"üóëÔ∏è  Table '{table}' supprim√©e")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Erreur lors de la suppression de '{table}': {e}")
            
            # R√©activer les contraintes de cl√©s √©trang√®res
            cursor.execute("SET session_replication_role = DEFAULT;")
            print("‚úÖ Contraintes de cl√©s √©trang√®res r√©activ√©es")
            
            # V√©rifier qu'il ne reste plus de tables
            cursor.execute("""
                SELECT COUNT(*) 
                FROM pg_tables 
                WHERE schemaname = 'public' 
                AND tablename NOT LIKE 'pg_%';
            """)
            
            remaining_tables = cursor.fetchone()[0]
            
            if remaining_tables == 0:
                print("\nüéâ SUCC√àS: Toutes les tables ont √©t√© supprim√©es !")
                print("üìù La base de donn√©es est maintenant vide.")
            else:
                print(f"\n‚ö†Ô∏è  ATTENTION: Il reste encore {remaining_tables} table(s)")
                
    except Exception as e:
        print(f"\n‚ùå ERREUR: {e}")
        return False
    
    return True

def reset_migrations():
    """
    Supprime toutes les entr√©es de la table django_migrations
    """
    print("\nüîÑ Suppression des entr√©es de migrations...")
    
    try:
        with connection.cursor() as cursor:
            # V√©rifier si la table django_migrations existe encore
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'django_migrations'
                );
            """)
            
            if cursor.fetchone()[0]:
                cursor.execute("DELETE FROM django_migrations;")
                print("‚úÖ Entr√©es de migrations supprim√©es")
            else:
                print("‚ÑπÔ∏è  Table django_migrations d√©j√† supprim√©e")
                
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de la suppression des migrations: {e}")

if __name__ == "__main__":
    print("=" * 60)
    print("üóëÔ∏è  SCRIPT DE SUPPRESSION COMPL√àTE DE LA BASE DE DONN√âES")
    print("=" * 60)
    
    # Supprimer toutes les tables
    if delete_all_tables():
        # Supprimer les entr√©es de migrations
        reset_migrations()
        
        print("\n" + "=" * 60)
        print("‚úÖ OP√âRATION TERMIN√âE AVEC SUCC√àS")
        print("=" * 60)
        print("\nüìã Prochaines √©tapes:")
        print("1. Ex√©cutez: python manage.py makemigrations")
        print("2. Ex√©cutez: python manage.py migrate")
        print("3. Cr√©ez un superutilisateur: python manage.py createsuperuser")
        print("\nüéØ Votre base de donn√©es est maintenant pr√™te pour un nouveau d√©part !")
    else:
        print("\n‚ùå L'op√©ration a √©chou√©.")
        sys.exit(1)
