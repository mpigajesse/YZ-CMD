"""
Script de correction des statistiques et du filtrage dans l'interface de pr√©paration.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from commande.models import Commande, EtatCommande, Operation, EnumEtatCmd
from parametre.models import Operateur
from django.utils import timezone
from datetime import timedelta

def corriger_statistiques_preparation():
    """
    Corrige la logique de calcul des statistiques et du filtrage.
    """
    print("üîß Correction des statistiques et du filtrage")
    print("=" * 60)
    
    # R√©cup√©rer un op√©rateur de pr√©paration
    operateur_prepa = Operateur.objects.filter(
        type_operateur='PREPARATION',
        actif=True
    ).first()
    
    if not operateur_prepa:
        print("‚ùå Aucun op√©rateur de pr√©paration actif trouv√©")
        return
    
    print(f"‚úÖ Op√©rateur de pr√©paration: {operateur_prepa.prenom} {operateur_prepa.nom}")
    
    # 1. Analyser toutes les commandes affect√©es
    print("\n1. Analyse de toutes les commandes affect√©es:")
    
    commandes_affectees = Commande.objects.filter(
        etats__enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).exclude(
        etats__enum_etat__libelle__in=['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']
    ).select_related('client', 'ville', 'ville__region').prefetch_related('etats').distinct()
    
    print(f"   - {commandes_affectees.count()} commandes affect√©es")
    
    # 2. Cat√©goriser les commandes
    print("\n2. Cat√©gorisation des commandes:")
    
    commandes_renvoyees_logistique = []
    commandes_livrees_partiellement = []
    commandes_normales = []
    
    for cmd in commandes_affectees:
        print(f"\n   üì¶ Commande {cmd.id_yz} ({cmd.num_cmd}):")
        
        # V√©rifier si c'est une commande de renvoi (livraison partielle)
        if cmd.num_cmd and cmd.num_cmd.startswith('RENVOI-'):
            print(f"      üîÑ Commande de renvoi d√©tect√©e (livraison partielle)")
            commandes_livrees_partiellement.append(cmd)
            continue
        
        # R√©cup√©rer tous les √©tats de la commande
        etats_commande = cmd.etats.all().order_by('date_debut')
        
        # Trouver l'√©tat actuel
        etat_actuel = None
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            print(f"      √âtat actuel: {etat_actuel.enum_etat.libelle} ({etat_actuel.date_debut.strftime('%d/%m/%Y %H:%M')})")
            
            # V√©rifier les op√©rations de renvoi
            from commande.models import Operation
            operation_renvoi = Operation.objects.filter(
                commande=cmd,
                type_operation='RENVOI_PREPARATION'
            ).first()
            
            if operation_renvoi:
                print(f"      ‚úÖ Op√©ration de renvoi trouv√©e: {operation_renvoi.date_operation.strftime('%d/%m/%Y %H:%M')}")
                commandes_renvoyees_logistique.append(cmd)
                continue
            
            # V√©rifier l'√©tat pr√©c√©dent
            etat_precedent = None
            for etat in reversed(etats_commande):
                if etat.date_fin and etat.date_fin < etat_actuel.date_debut:
                    if etat.enum_etat.libelle not in ['√Ä imprimer', 'En pr√©paration']:
                        etat_precedent = etat
                        break
            
            if etat_precedent:
                print(f"      ‚¨ÖÔ∏è √âtat pr√©c√©dent: {etat_precedent.enum_etat.libelle} ({etat_precedent.date_fin.strftime('%d/%m/%Y %H:%M')})")
                
                if etat_precedent.enum_etat.libelle == 'En cours de livraison':
                    print(f"      ‚úÖ Commande renvoy√©e depuis la logistique")
                    commandes_renvoyees_logistique.append(cmd)
                elif etat_precedent.enum_etat.libelle == 'Livr√©e Partiellement':
                    print(f"      ‚ö†Ô∏è Commande livr√©e partiellement")
                    commandes_livrees_partiellement.append(cmd)
                else:
                    print(f"      üìã Commande normale")
                    commandes_normales.append(cmd)
            else:
                print(f"      ‚ùì Aucun √©tat pr√©c√©dent trouv√©")
                commandes_normales.append(cmd)
    
    # 3. R√©sum√© des cat√©gories
    print(f"\n3. R√©sum√© des cat√©gories:")
    print(f"   - Commandes renvoy√©es par logistique: {len(commandes_renvoyees_logistique)}")
    print(f"   - Commandes livr√©es partiellement: {len(commandes_livrees_partiellement)}")
    print(f"   - Commandes normales: {len(commandes_normales)}")
    
    # 4. Afficher les commandes par cat√©gorie
    print(f"\n4. D√©tail par cat√©gorie:")
    
    print(f"\n   üöõ Commandes renvoy√©es par logistique ({len(commandes_renvoyees_logistique)}):")
    for cmd in commandes_renvoyees_logistique:
        print(f"      - Commande {cmd.id_yz} ({cmd.num_cmd})")
    
    print(f"\n   ‚ö†Ô∏è Commandes livr√©es partiellement ({len(commandes_livrees_partiellement)}):")
    for cmd in commandes_livrees_partiellement:
        print(f"      - Commande {cmd.id_yz} ({cmd.num_cmd})")
    
    print(f"\n   üìã Commandes normales ({len(commandes_normales)}):")
    for cmd in commandes_normales:
        print(f"      - Commande {cmd.id_yz} ({cmd.num_cmd})")
    
    # 5. V√©rifier les statistiques actuelles
    print(f"\n5. V√©rification des statistiques actuelles:")
    
    # Calculer les statistiques comme dans la vue
    stats_par_type = {
        'renvoyees_logistique': 0,
        'livrees_partiellement': 0
    }
    
    # Recalculer les statistiques pour tous les types
    toutes_commandes = Commande.objects.filter(
        etats__enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).exclude(
        etats__enum_etat__libelle__in=['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']
    ).select_related('client', 'ville', 'ville__region').prefetch_related('etats').distinct()
    
    for cmd in toutes_commandes:
        # V√©rifier si c'est une commande renvoy√©e par la logistique
        operation_renvoi = Operation.objects.filter(
            commande=cmd,
            type_operation='RENVOI_PREPARATION'
        ).first()
        
        if operation_renvoi:
            stats_par_type['renvoyees_logistique'] += 1
            continue
        
        # V√©rifier l'√©tat pr√©c√©dent
        etats_commande = cmd.etats.all().order_by('date_debut')
        etat_actuel = None
        
        # Trouver l'√©tat actuel
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            # Trouver l'√©tat pr√©c√©dent
            for etat in reversed(etats_commande):
                if etat.date_fin and etat.date_fin < etat_actuel.date_debut:
                    if etat.enum_etat.libelle == 'En cours de livraison':
                        stats_par_type['renvoyees_logistique'] += 1
                        break
                    elif etat.enum_etat.libelle == 'Livr√©e Partiellement':
                        stats_par_type['livrees_partiellement'] += 1
                        break
    
    # Calculer le nombre de commandes de renvoi
    commandes_renvoi_count = Commande.objects.filter(
        num_cmd__startswith='RENVOI-',
        etats__enum_etat__libelle='En pr√©paration',
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).exclude(
        etats__enum_etat__libelle__in=['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']
    ).distinct().count()
    
    # Mettre √† jour le compteur
    stats_par_type['livrees_partiellement'] = commandes_renvoi_count
    
    print(f"   - Statistiques calcul√©es par la vue:")
    print(f"     * Renvoy√©es par logistique: {stats_par_type['renvoyees_logistique']}")
    print(f"     * Livr√©es partiellement: {stats_par_type['livrees_partiellement']}")
    
    print(f"\n   - Statistiques calcul√©es manuellement:")
    print(f"     * Renvoy√©es par logistique: {len(commandes_renvoyees_logistique)}")
    print(f"     * Livr√©es partiellement: {len(commandes_livrees_partiellement)}")
    
    # 6. Identifier les probl√®mes
    print(f"\n6. Identification des probl√®mes:")
    
    if stats_par_type['renvoyees_logistique'] != len(commandes_renvoyees_logistique):
        print(f"   ‚ö†Ô∏è Diff√©rence dans 'renvoyees_logistique':")
        print(f"      Vue: {stats_par_type['renvoyees_logistique']}")
        print(f"      Manuel: {len(commandes_renvoyees_logistique)}")
    
    if stats_par_type['livrees_partiellement'] != len(commandes_livrees_partiellement):
        print(f"   ‚ö†Ô∏è Diff√©rence dans 'livrees_partiellement':")
        print(f"      Vue: {stats_par_type['livrees_partiellement']}")
        print(f"      Manuel: {len(commandes_livrees_partiellement)}")
    
    print("\n" + "=" * 60)
    print("‚úÖ ANALYSE TERMIN√âE")
    print("=" * 60)

if __name__ == "__main__":
    corriger_statistiques_preparation() 