from django.core.management.base import BaseCommand
from django.db import connection, transaction
from django.core.exceptions import ValidationError
from article.models import Article, VarianteArticle, Categorie, Genre, Pointure, Couleur


class Command(BaseCommand):
    help = 'Corrige les contraintes de base de donn√©es et r√©sout les probl√®mes de coh√©rence'

    def add_arguments(self, parser):
        parser.add_argument(
            '--fix-all',
            action='store_true',
            help='Corrige tous les probl√®mes d√©tect√©s'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Affiche ce qui serait corrig√© sans effectuer les corrections'
        )

    def handle(self, *args, **options):
        fix_all = options['fix_all']
        dry_run = options['dry_run']

        self.stdout.write('üîç V√©rification des contraintes de base de donn√©es...')

        # V√©rifier et corriger les probl√®mes
        problems = self.detecter_problemes()
        
        if not problems:
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Aucun probl√®me d√©tect√© !')
            )
            return

        self.stdout.write(f'‚ö†Ô∏è  {len(problems)} probl√®me(s) d√©tect√©(s) :')
        for i, problem in enumerate(problems, 1):
            self.stdout.write(f'   {i}. {problem["description"]}')

        if not fix_all:
            self.stdout.write(
                self.style.WARNING(
                    '\nPour corriger automatiquement, utilisez --fix-all'
                )
            )
            return

        if dry_run:
            self.stdout.write(
                self.style.INFO('üîç Mode dry-run - Aucune correction effectu√©e')
            )
            return

        # Corriger les probl√®mes
        self.stdout.write('\nüîß Correction des probl√®mes...')
        self.corriger_problemes(problems)

        self.stdout.write(
            self.style.SUCCESS('‚úÖ Correction termin√©e !')
        )

    def detecter_problemes(self):
        """D√©tecte tous les probl√®mes de contraintes"""
        problems = []

        # 1. V√©rifier les articles avec des r√©f√©rences manquantes
        try:
            articles_sans_categorie = Article.objects.filter(categorie__isnull=True)
            if articles_sans_categorie.exists():
                problems.append({
                    'type': 'articles_sans_categorie',
                    'description': f'{articles_sans_categorie.count()} article(s) sans cat√©gorie',
                    'queryset': articles_sans_categorie
                })
        except Exception as e:
            problems.append({
                'type': 'erreur_categorie',
                'description': f'Erreur lors de la v√©rification des cat√©gories: {e}',
                'queryset': None
            })

        # 2. V√©rifier les variantes avec des r√©f√©rences manquantes
        try:
            variantes_sans_article = VarianteArticle.objects.filter(article__isnull=True)
            if variantes_sans_article.exists():
                problems.append({
                    'type': 'variantes_sans_article',
                    'description': f'{variantes_sans_article.count()} variante(s) sans article',
                    'queryset': variantes_sans_article
                })
        except Exception as e:
            problems.append({
                'type': 'erreur_variantes',
                'description': f'Erreur lors de la v√©rification des variantes: {e}',
                'queryset': None
            })

        # 3. V√©rifier les contraintes de cl√©s √©trang√®res
        try:
            with connection.cursor() as cursor:
                # V√©rifier les contraintes de cl√©s √©trang√®res
                cursor.execute("""
                    SELECT 
                        TABLE_NAME,
                        COLUMN_NAME,
                        CONSTRAINT_NAME,
                        REFERENCED_TABLE_NAME,
                        REFERENCED_COLUMN_NAME
                    FROM 
                        INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
                    WHERE 
                        REFERENCED_TABLE_SCHEMA = DATABASE()
                        AND REFERENCED_TABLE_NAME IS NOT NULL
                """)
                
                foreign_keys = cursor.fetchall()
                for fk in foreign_keys:
                    table, column, constraint, ref_table, ref_column = fk
                    
                    # V√©rifier si la table r√©f√©renc√©e existe
                    cursor.execute(f"SHOW TABLES LIKE '{ref_table}'")
                    if not cursor.fetchone():
                        problems.append({
                            'type': 'table_referencee_manquante',
                            'description': f'Table r√©f√©renc√©e manquante: {ref_table} (r√©f√©renc√©e par {table}.{column})',
                            'queryset': None
                        })
        except Exception as e:
            problems.append({
                'type': 'erreur_contraintes',
                'description': f'Erreur lors de la v√©rification des contraintes: {e}',
                'queryset': None
            })

        # 4. V√©rifier les donn√©es orphelines
        try:
            # Articles sans variantes
            articles_sans_variantes = Article.objects.filter(variantes__isnull=True)
            if articles_sans_variantes.exists():
                problems.append({
                    'type': 'articles_sans_variantes',
                    'description': f'{articles_sans_variantes.count()} article(s) sans variantes',
                    'queryset': articles_sans_variantes
                })
        except Exception as e:
            problems.append({
                'type': 'erreur_variantes_articles',
                'description': f'Erreur lors de la v√©rification des variantes d\'articles: {e}',
                'queryset': None
            })

        return problems

    def corriger_problemes(self, problems):
        """Corrige tous les probl√®mes d√©tect√©s"""
        with transaction.atomic():
            for problem in problems:
                try:
                    if problem['type'] == 'articles_sans_categorie':
                        self.corriger_articles_sans_categorie(problem['queryset'])
                    elif problem['type'] == 'variantes_sans_article':
                        self.corriger_variantes_sans_article(problem['queryset'])
                    elif problem['type'] == 'articles_sans_variantes':
                        self.corriger_articles_sans_variantes(problem['queryset'])
                    elif problem['type'] == 'table_referencee_manquante':
                        self.stdout.write(
                            self.style.WARNING(f'‚ö†Ô∏è  {problem["description"]} - Correction manuelle requise')
                        )
                    else:
                        self.stdout.write(
                            self.style.WARNING(f'‚ö†Ô∏è  {problem["description"]} - Type de probl√®me non g√©r√©')
                        )
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå Erreur lors de la correction de {problem["type"]}: {e}')
                    )

    def corriger_articles_sans_categorie(self, queryset):
        """Corrige les articles sans cat√©gorie"""
        self.stdout.write(f'   üîß Correction des articles sans cat√©gorie...')
        
        # Cr√©er une cat√©gorie par d√©faut si elle n'existe pas
        categorie_defaut, created = Categorie.objects.get_or_create(
            nom='AUTRE',
            defaults={'description': 'Cat√©gorie par d√©faut pour les articles non class√©s'}
        )
        
        if created:
            self.stdout.write(f'      - Cat√©gorie par d√©faut "AUTRE" cr√©√©e')
        
        # Assigner la cat√©gorie par d√©faut aux articles
        count = queryset.update(categorie=categorie_defaut)
        self.stdout.write(f'      - {count} article(s) corrig√©(s)')

    def corriger_variantes_sans_article(self, queryset):
        """Corrige les variantes sans article"""
        self.stdout.write(f'   üîß Correction des variantes sans article...')
        
        # Supprimer les variantes orphelines
        count = queryset.count()
        queryset.delete()
        self.stdout.write(f'      - {count} variante(s) orpheline(s) supprim√©e(s)')

    def corriger_articles_sans_variantes(self, queryset):
        """Corrige les articles sans variantes"""
        self.stdout.write(f'   üîß Correction des articles sans variantes...')
        
        # Cr√©er des variantes par d√©faut pour les articles
        for article in queryset:
            try:
                # Cr√©er une variante avec des valeurs par d√©faut
                VarianteArticle.objects.create(
                    article=article,
                    couleur=Couleur.objects.first() or self.creer_couleur_defaut(),
                    pointure=Pointure.objects.first() or self.creer_pointure_defaut(),
                    qte_disponible=0,
                    prix_unitaire=article.prix_unitaire,
                    prix_achat=article.prix_achat or 0,
                    actif=article.actif
                )
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'      ‚ùå Erreur lors de la cr√©ation de variante pour {article.nom}: {e}')
                )
        
        self.stdout.write(f'      - Variantes par d√©faut cr√©√©es pour {queryset.count()} article(s)')

    def creer_couleur_defaut(self):
        """Cr√©e une couleur par d√©faut"""
        couleur, created = Couleur.objects.get_or_create(
            nom='Non sp√©cifi√©e',
            defaults={'description': 'Couleur par d√©faut'}
        )
        if created:
            self.stdout.write(f'      - Couleur par d√©faut "Non sp√©cifi√©e" cr√©√©e')
        return couleur

    def creer_pointure_defaut(self):
        """Cr√©e une pointure par d√©faut"""
        pointure, created = Pointure.objects.get_or_create(
            pointure='Non sp√©cifi√©e',
            defaults={'description': 'Pointure par d√©faut', 'ordre': 999}
        )
        if created:
            self.stdout.write(f'      - Pointure par d√©faut "Non sp√©cifi√©e" cr√©√©e')
        return pointure

    def afficher_statistiques(self):
        """Affiche les statistiques de la base"""
        self.stdout.write('\nüìä Statistiques de la base :')
        self.stdout.write(f'   - Articles : {Article.objects.count()}')
        self.stdout.write(f'   - Variantes : {VarianteArticle.objects.count()}')
        self.stdout.write(f'   - Cat√©gories : {Categorie.objects.count()}')
        self.stdout.write(f'   - Couleurs : {Couleur.objects.count()}')
        self.stdout.write(f'   - Pointures : {Pointure.objects.count()}')
        self.stdout.write(f'   - Genres : {Genre.objects.count()}')
