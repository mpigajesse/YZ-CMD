from django.core.management.base import BaseCommand
from django.db import connection, transaction
from django.core.management import call_command
from article.models import Article, VarianteArticle, Categorie, Genre, Pointure, Couleur


class Command(BaseCommand):
    help = 'Migre la structure des articles vers le nouveau mod√®le avec variantes'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force la migration m√™me si des erreurs sont d√©tect√©es'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Affiche ce qui serait migr√© sans effectuer la migration'
        )

    def handle(self, *args, **options):
        force = options['force']
        dry_run = options['dry_run']

        self.stdout.write('üîÑ Migration de la structure des articles...')

        if dry_run:
            self.stdout.write(
                self.style.INFO('üîç Mode dry-run - Aucune migration effectu√©e')
            )

        # 1. V√©rifier la structure actuelle
        self.verifier_structure()

        # 2. Cr√©er les donn√©es de base si n√©cessaire
        if not dry_run:
            self.creer_donnees_base()

        # 3. Migrer les articles existants
        if not dry_run:
            self.migrer_articles_existants()

        # 4. Nettoyer les contraintes obsol√®tes
        if not dry_run:
            self.nettoyer_contraintes()

        self.stdout.write(
            self.style.SUCCESS('‚úÖ Migration termin√©e !')
        )

    def verifier_structure(self):
        """V√©rifie la structure actuelle de la base"""
        self.stdout.write('üîç V√©rification de la structure...')

        # V√©rifier les tables
        with connection.cursor() as cursor:
            cursor.execute("SHOW TABLES")
            tables = [row[0] for row in cursor.fetchall()]
            
            required_tables = [
                'article_article',
                'article_categorie', 
                'article_genre',
                'article_pointure',
                'article_couleur',
                'article_variantearticle'
            ]
            
            for table in required_tables:
                if table in tables:
                    self.stdout.write(f'   ‚úÖ Table {table} existe')
                else:
                    self.stdout.write(
                        self.style.WARNING(f'   ‚ö†Ô∏è  Table {table} manquante')
                    )

        # V√©rifier les mod√®les
        try:
            self.stdout.write(f'   üìä Articles: {Article.objects.count()}')
            self.stdout.write(f'   üìä Variantes: {VarianteArticle.objects.count()}')
            self.stdout.write(f'   üìä Cat√©gories: {Categorie.objects.count()}')
            self.stdout.write(f'   üìä Genres: {Genre.objects.count()}')
            self.stdout.write(f'   üìä Pointures: {Pointure.objects.count()}')
            self.stdout.write(f'   üìä Couleurs: {Couleur.objects.count()}')
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'   ‚ùå Erreur lors de la v√©rification: {e}')
            )

    def creer_donnees_base(self):
        """Cr√©e les donn√©es de base n√©cessaires"""
        self.stdout.write('üîß Cr√©ation des donn√©es de base...')

        with transaction.atomic():
            # Cr√©er les cat√©gories de base
            categories = [
                'SANDALES', 'SABOT', 'CHAUSSURES', 'ESPARILLE', 
                'BASKET', 'MULES', 'PACK_SAC', 'BOTTE', 'ESCARPINS'
            ]
            for cat in categories:
                categorie, created = Categorie.objects.get_or_create(nom=cat)
                if created:
                    self.stdout.write(f'   - Cat√©gorie "{cat}" cr√©√©e')
                else:
                    self.stdout.write(f'   - Cat√©gorie "{cat}" existe d√©j√†')

            # Cr√©er les genres de base
            genres = ['HOMME', 'FEMME', 'FILLE', 'GARCON']
            for gen in genres:
                genre, created = Genre.objects.get_or_create(nom=gen)
                if created:
                    self.stdout.write(f'   - Genre "{gen}" cr√©√©')
                else:
                    self.stdout.write(f'   - Genre "{gen}" existe d√©j√†')

            # Cr√©er les pointures de base
            pointures = ['35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45']
            for i, point in enumerate(pointures):
                pointure, created = Pointure.objects.get_or_create(
                    pointure=point,
                    defaults={'ordre': i}
                )
                if created:
                    self.stdout.write(f'   - Pointure "{point}" cr√©√©e')
                else:
                    self.stdout.write(f'   - Pointure "{point}" existe d√©j√†')

            # Cr√©er les couleurs de base
            couleurs = ['Noir', 'Blanc', 'Beige', 'Marron', 'Bleu', 'Rouge', 'Vert']
            for couleur in couleurs:
                couleur_obj, created = Couleur.objects.get_or_create(nom=couleur)
                if created:
                    self.stdout.write(f'   - Couleur "{couleur}" cr√©√©e')
                else:
                    self.stdout.write(f'   - Couleur "{couleur}" existe d√©j√†')

    def migrer_articles_existants(self):
        """Migre les articles existants vers la nouvelle structure"""
        self.stdout.write('üîÑ Migration des articles existants...')

        # R√©cup√©rer tous les articles
        articles = Article.objects.all()
        
        if not articles.exists():
            self.stdout.write('   - Aucun article √† migrer')
            return

        with transaction.atomic():
            for article in articles:
                try:
                    # V√©rifier si l'article a d√©j√† des variantes
                    if article.variantes.exists():
                        self.stdout.write(f'   - Article "{article.nom}" a d√©j√† des variantes')
                        continue

                    # Cr√©er une variante par d√©faut
                    # Utiliser les premi√®res couleurs et pointures disponibles
                    couleur = Couleur.objects.filter(actif=True).first()
                    pointure = Pointure.objects.filter(actif=True).first()

                    if couleur and pointure:
                        VarianteArticle.objects.create(
                            article=article,
                            couleur=couleur,
                            pointure=pointure,
                            qte_disponible=0,  # Quantit√© par d√©faut
                            prix_unitaire=article.prix_unitaire,
                            prix_achat=article.prix_achat or 0,
                            actif=article.actif
                        )
                        self.stdout.write(f'   - Variante cr√©√©e pour "{article.nom}"')
                    else:
                        self.stdout.write(
                            self.style.WARNING(f'   ‚ö†Ô∏è  Impossible de cr√©er une variante pour "{article.nom}" - couleurs/pointures manquantes')
                        )

                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'   ‚ùå Erreur lors de la migration de "{article.nom}": {e}')
                    )

    def nettoyer_contraintes(self):
        """Nettoie les contraintes obsol√®tes"""
        self.stdout.write('üßπ Nettoyage des contraintes obsol√®tes...')

        try:
            with connection.cursor() as cursor:
                # V√©rifier les contraintes existantes
                cursor.execute("""
                    SELECT 
                        CONSTRAINT_NAME,
                        TABLE_NAME,
                        COLUMN_NAME
                    FROM 
                        INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
                    WHERE 
                        TABLE_SCHEMA = DATABASE()
                        AND TABLE_NAME = 'article_article'
                """)
                
                constraints = cursor.fetchall()
                
                for constraint in constraints:
                    constraint_name, table, column = constraint
                    
                    # Supprimer les contraintes obsol√®tes
                    if 'unique_together' in constraint_name.lower():
                        try:
                            cursor.execute(f"ALTER TABLE {table} DROP INDEX {constraint_name}")
                            self.stdout.write(f'   - Contrainte {constraint_name} supprim√©e')
                        except Exception as e:
                            self.stdout.write(
                                self.style.WARNING(f'   ‚ö†Ô∏è  Impossible de supprimer {constraint_name}: {e}')
                            )

        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f'   ‚ö†Ô∏è  Erreur lors du nettoyage des contraintes: {e}')
            )

    def afficher_statistiques_finales(self):
        """Affiche les statistiques finales"""
        self.stdout.write('\nüìä Statistiques finales :')
        try:
            self.stdout.write(f'   - Articles : {Article.objects.count()}')
            self.stdout.write(f'   - Variantes : {VarianteArticle.objects.count()}')
            self.stdout.write(f'   - Cat√©gories : {Categorie.objects.count()}')
            self.stdout.write(f'   - Genres : {Genre.objects.count()}')
            self.stdout.write(f'   - Pointures : {Pointure.objects.count()}')
            self.stdout.write(f'   - Couleurs : {Couleur.objects.count()}')
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'   ‚ùå Erreur lors de l\'affichage des statistiques: {e}')
            )
