import os
from django.core.management.base import BaseCommand
from django.db import transaction
from django.conf import settings
from article.models import Article, Categorie, Genre, Pointure, Couleur, VarianteArticle, MouvementStock, Promotion
from commande.models import Commande, Panier, EtatCommande, Operation, EnumEtatCmd
from client.models import Client
from parametre.models import Operateur, Ville, Region
from kpis.models import KPIConfiguration


class Command(BaseCommand):
    help = 'Vide la base de donn√©es selon diff√©rentes options'

    def add_arguments(self, parser):
        parser.add_argument(
            '--option',
            type=str,
            choices=['articles', 'commandes', 'clients', 'operateurs', 'tout', 'soft', 'hard'],
            default='tout',
            help='Option de nettoyage (d√©faut: tout)'
        )
        parser.add_argument(
            '--confirm',
            action='store_true',
            help='Confirme l\'op√©ration sans demander de confirmation'
        )
        parser.add_argument(
            '--backup',
            action='store_true',
            help='Cr√©e une sauvegarde avant de vider (si possible)'
        )

    def handle(self, *args, **options):
        option = options['option']
        confirm = options['confirm']
        backup = options['backup']

        self.stdout.write(
            self.style.WARNING(
                '‚ö†Ô∏è  ATTENTION : Cette op√©ration va supprimer des donn√©es de la base !'
            )
        )

        if not confirm:
            self.stdout.write(
                self.style.ERROR(
                    'Pour confirmer, utilisez --confirm ou r√©pondez "oui" √† la question suivante'
                )
            )
            user_input = input('√ätes-vous s√ªr de vouloir continuer ? (oui/non): ')
            if user_input.lower() not in ['oui', 'yes', 'o', 'y']:
                self.stdout.write(self.style.SUCCESS('Op√©ration annul√©e.'))
                return

        # Cr√©er une sauvegarde si demand√©e
        if backup:
            self.creer_sauvegarde()

        # Ex√©cuter le nettoyage selon l'option
        if option == 'tout':
            self.vider_tout()
        elif option == 'articles':
            self.vider_articles()
        elif option == 'commandes':
            self.vider_commandes()
        elif option == 'clients':
            self.vider_clients()
        elif option == 'operateurs':
            self.vider_operateurs()
        elif option == 'soft':
            self.soft_reset()
        elif option == 'hard':
            self.hard_reset()

        self.stdout.write(
            self.style.SUCCESS('‚úÖ Nettoyage termin√© avec succ√®s !')
        )

    def creer_sauvegarde(self):
        """Cr√©e une sauvegarde de la base de donn√©es si possible"""
        try:
            from django.core.management import call_command
            from datetime import datetime
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_file = f'backup_{timestamp}.json'
            
            self.stdout.write(f'üì¶ Cr√©ation de la sauvegarde : {backup_file}')
            
            # Cr√©er une sauvegarde des donn√©es principales
            call_command('dumpdata', 
                        'article', 'commande', 'client', 'parametre',
                        '--indent=2',
                        f'--output={backup_file}')
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Sauvegarde cr√©√©e : {backup_file}')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è  Impossible de cr√©er la sauvegarde : {e}')
            )

    def vider_tout(self):
        """Vide compl√®tement la base de donn√©es"""
        self.stdout.write('üßπ Nettoyage complet de la base de donn√©es...')
        
        with transaction.atomic():
            # Supprimer dans l'ordre pour respecter les contraintes
            
            # 1. Supprimer les mouvements de stock
            count = MouvementStock.objects.all().delete()[0]
            self.stdout.write(f'   - {count} mouvements de stock supprim√©s')
            
            # 2. Supprimer les variantes d'articles
            count = VarianteArticle.objects.all().delete()[0]
            self.stdout.write(f'   - {count} variantes d\'articles supprim√©es')
            
            # 3. Supprimer les promotions
            count = Promotion.objects.all().delete()[0]
            self.stdout.write(f'   - {count} promotions supprim√©es')
            
            # 4. Supprimer les articles
            count = Article.objects.all().delete()[0]
            self.stdout.write(f'   - {count} articles supprim√©s')
            
            # 5. Supprimer les op√©rations
            count = Operation.objects.all().delete()[0]
            self.stdout.write(f'   - {count} op√©rations supprim√©es')
            
            # 6. Supprimer les √©tats de commande
            count = EtatCommande.objects.all().delete()[0]
            self.stdout.write(f'   - {count} √©tats de commande supprim√©s')
            
            # 7. Supprimer les paniers
            count = Panier.objects.all().delete()[0]
            self.stdout.write(f'   - {count} paniers supprim√©s')
            
            # 8. Supprimer les commandes
            count = Commande.objects.all().delete()[0]
            self.stdout.write(f'   - {count} commandes supprim√©es')
            
            # 9. Supprimer les clients
            count = Client.objects.all().delete()[0]
            self.stdout.write(f'   - {count} clients supprim√©s')
            
            # 10. Supprimer les op√©rateurs
            count = Operateur.objects.all().delete()[0]
            self.stdout.write(f'   - {count} op√©rateurs supprim√©s')
            
            # 11. Supprimer les villes
            count = Ville.objects.all().delete()[0]
            self.stdout.write(f'   - {count} villes supprim√©es')
            
            # 12. Supprimer les r√©gions
            count = Region.objects.all().delete()[0]
            self.stdout.write(f'   - {count} r√©gions supprim√©es')
            
            # 13. Supprimer les cat√©gories
            count = Categorie.objects.all().delete()[0]
            self.stdout.write(f'   - {count} cat√©gories supprim√©es')
            
            # 14. Supprimer les genres
            count = Genre.objects.all().delete()[0]
            self.stdout.write(f'   - {count} genres supprim√©s')
            
            # 15. Supprimer les pointures
            count = Pointure.objects.all().delete()[0]
            self.stdout.write(f'   - {count} pointures supprim√©es')
            
            # 16. Supprimer les couleurs
            count = Couleur.objects.all().delete()[0]
            self.stdout.write(f'   - {count} couleurs supprim√©es')
            
            # 17. Supprimer les √©tats de commande √©num√©r√©s
            count = EnumEtatCmd.objects.all().delete()[0]
            self.stdout.write(f'   - {count} √©tats de commande √©num√©r√©s supprim√©s')
            
            # 18. Supprimer les configurations KPI
            count = KPIConfiguration.objects.all().delete()[0]
            self.stdout.write(f'   - {count} configurations KPI supprim√©es')

    def vider_articles(self):
        """Vide uniquement les articles et leurs variantes"""
        self.stdout.write('üßπ Nettoyage des articles...')
        
        with transaction.atomic():
            # Supprimer les mouvements de stock
            count = MouvementStock.objects.all().delete()[0]
            self.stdout.write(f'   - {count} mouvements de stock supprim√©s')
            
            # Supprimer les variantes
            count = VarianteArticle.objects.all().delete()[0]
            self.stdout.write(f'   - {count} variantes d\'articles supprim√©es')
            
            # Supprimer les promotions
            count = Promotion.objects.all().delete()[0]
            self.stdout.write(f'   - {count} promotions supprim√©es')
            
            # Supprimer les articles
            count = Article.objects.all().delete()[0]
            self.stdout.write(f'   - {count} articles supprim√©s')

    def vider_commandes(self):
        """Vide uniquement les commandes et leurs donn√©es associ√©es"""
        self.stdout.write('üßπ Nettoyage des commandes...')
        
        with transaction.atomic():
            # Supprimer les op√©rations
            count = Operation.objects.all().delete()[0]
            self.stdout.write(f'   - {count} op√©rations supprim√©es')
            
            # Supprimer les √©tats de commande
            count = EtatCommande.objects.all().delete()[0]
            self.stdout.write(f'   - {count} √©tats de commande supprim√©s')
            
            # Supprimer les paniers
            count = Panier.objects.all().delete()[0]
            self.stdout.write(f'   - {count} paniers supprim√©s')
            
            # Supprimer les commandes
            count = Commande.objects.all().delete()[0]
            self.stdout.write(f'   - {count} commandes supprim√©es')

    def vider_clients(self):
        """Vide uniquement les clients"""
        self.stdout.write('üßπ Nettoyage des clients...')
        
        with transaction.atomic():
            # Supprimer les clients (les commandes seront supprim√©es en cascade)
            count = Client.objects.all().delete()[0]
            self.stdout.write(f'   - {count} clients supprim√©s')

    def vider_operateurs(self):
        """Vide uniquement les op√©rateurs"""
        self.stdout.write('üßπ Nettoyage des op√©rateurs...')
        
        with transaction.atomic():
            # Supprimer les op√©rateurs
            count = Operateur.objects.all().delete()[0]
            self.stdout.write(f'   - {count} op√©rateurs supprim√©s')

    def soft_reset(self):
        """Reset soft : d√©sactive les √©l√©ments au lieu de les supprimer"""
        self.stdout.write('üßπ Reset soft (d√©sactivation)...')
        
        with transaction.atomic():
            # D√©sactiver les articles
            count = Article.objects.filter(actif=True).update(actif=False)
            self.stdout.write(f'   - {count} articles d√©sactiv√©s')
            
            # D√©sactiver les variantes
            count = VarianteArticle.objects.filter(actif=True).update(actif=False)
            self.stdout.write(f'   - {count} variantes d√©sactiv√©es')
            
            # D√©sactiver les cat√©gories
            count = Categorie.objects.filter(actif=True).update(actif=False)
            self.stdout.write(f'   - {count} cat√©gories d√©sactiv√©es')
            
            # D√©sactiver les genres
            count = Genre.objects.filter(actif=True).update(actif=False)
            self.stdout.write(f'   - {count} genres d√©sactiv√©s')
            
            # D√©sactiver les pointures
            count = Pointure.objects.filter(actif=True).update(actif=False)
            self.stdout.write(f'   - {count} pointures d√©sactiv√©es')
            
            # D√©sactiver les couleurs
            count = Couleur.objects.filter(actif=True).update(actif=False)
            self.stdout.write(f'   - {count} couleurs d√©sactiv√©es')
            
            # D√©sactiver les op√©rateurs
            count = Operateur.objects.filter(actif=True).update(actif=False)
            self.stdout.write(f'   - {count} op√©rateurs d√©sactiv√©s')
            
            # D√©sactiver les clients
            count = Client.objects.filter(is_active=True).update(is_active=False)
            self.stdout.write(f'   - {count} clients d√©sactiv√©s')

    def hard_reset(self):
        """Reset hard : supprime tout et recr√©e les donn√©es de base"""
        self.stdout.write('üßπ Reset hard (suppression compl√®te + recr√©ation)...')
        
        # D'abord tout supprimer
        self.vider_tout()
        
        # Puis recr√©er les donn√©es de base
        self.creer_donnees_base()

    def creer_donnees_base(self):
        """Cr√©e les donn√©es de base n√©cessaires au fonctionnement"""
        self.stdout.write('üîß Cr√©ation des donn√©es de base...')
        
        with transaction.atomic():
            # Cr√©er les cat√©gories de base
            categories = [
                'SANDALES', 'SABOT', 'CHAUSSURES', 'ESPARILLE', 
                'BASKET', 'MULES', 'PACK_SAC', 'BOTTE', 'ESCARPINS'
            ]
            for cat in categories:
                Categorie.objects.get_or_create(nom=cat)
            self.stdout.write(f'   - {len(categories)} cat√©gories cr√©√©es')
            
            # Cr√©er les genres de base
            genres = ['HOMME', 'FEMME', 'FILLE', 'GARCON']
            for gen in genres:
                Genre.objects.get_or_create(nom=gen)
            self.stdout.write(f'   - {len(genres)} genres cr√©√©s')
            
            # Cr√©er les pointures de base
            pointures = ['35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45']
            for i, point in enumerate(pointures):
                Pointure.objects.get_or_create(
                    pointure=point,
                    defaults={'ordre': i}
                )
            self.stdout.write(f'   - {len(pointures)} pointures cr√©√©es')
            
            # Cr√©er les couleurs de base
            couleurs = ['Noir', 'Blanc', 'Beige', 'Marron', 'Bleu', 'Rouge', 'Vert']
            for couleur in couleurs:
                Couleur.objects.get_or_create(nom=couleur)
            self.stdout.write(f'   - {len(couleurs)} couleurs cr√©√©es')
            
            # Cr√©er les √©tats de commande de base
            etats = [
                ('Nouvelle', 1, '#3B82F6'),
                ('Confirm√©e', 2, '#10B981'),
                ('En pr√©paration', 3, '#F59E0B'),
                ('Pr√™te', 4, '#8B5CF6'),
                ('Exp√©di√©e', 5, '#06B6D4'),
                ('Livr√©e', 6, '#059669'),
                ('Annul√©e', 7, '#EF4444'),
            ]
            for libelle, ordre, couleur in etats:
                EnumEtatCmd.objects.get_or_create(
                    libelle=libelle,
                    defaults={'ordre': ordre, 'couleur': couleur}
                )
            self.stdout.write(f'   - {len(etats)} √©tats de commande cr√©√©s')
            
            # Cr√©er une r√©gion et une ville par d√©faut
            region, _ = Region.objects.get_or_create(nom_region='Casablanca-Settat')
            ville, _ = Ville.objects.get_or_create(
                nom='Casablanca',
                defaults={
                    'frais_livraison': 30.0,
                    'frequence_livraison': 'Quotidienne',
                    'region': region
                }
            )
            self.stdout.write('   - R√©gion et ville par d√©faut cr√©√©es')

    def afficher_statistiques(self):
        """Affiche les statistiques actuelles de la base"""
        self.stdout.write('\nüìä Statistiques actuelles de la base :')
        self.stdout.write(f'   - Articles : {Article.objects.count()}')
        self.stdout.write(f'   - Variantes : {VarianteArticle.objects.count()}')
        self.stdout.write(f'   - Commandes : {Commande.objects.count()}')
        self.stdout.write(f'   - Clients : {Client.objects.count()}')
        self.stdout.write(f'   - Op√©rateurs : {Operateur.objects.count()}')
        self.stdout.write(f'   - Cat√©gories : {Categorie.objects.count()}')
        self.stdout.write(f'   - Genres : {Genre.objects.count()}')
        self.stdout.write(f'   - Pointures : {Pointure.objects.count()}')
        self.stdout.write(f'   - Couleurs : {Couleur.objects.count()}')
