#!/usr/bin/env python3
"""
Script pour g√©n√©rer des donn√©es de test pour les performances d'op√©rateurs
"""

import os
import sys
import django
from django.utils import timezone
from datetime import datetime, timedelta
from decimal import Decimal
import random

# Ajouter le chemin du projet Django
sys.path.append('/workspaces/YZ-CMD')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

# Initialiser Django
django.setup()

from commande.models import Commande, EtatCommande, Operation, EnumEtatCmd
from parametre.models import Operateur
from article.models import Article
from client.models import Client, Region, Ville
from django.contrib.auth.models import User

def generer_donnees_test_operateurs():
    """G√©n√®re des donn√©es de test pour les performances d'op√©rateurs"""
    
    print("=== G√©n√©ration de donn√©es test pour les performances d'op√©rateurs ===\n")
    
    # V√©rifier qu'on a des op√©rateurs
    operateurs = Operateur.objects.exclude(type_operateur='ADMIN')
    if not operateurs.exists():
        print("Aucun op√©rateur trouv√© (hors ADMIN). Veuillez d'abord cr√©er des op√©rateurs.")
        return
    
    print(f"Op√©rateurs disponibles: {operateurs.count()}")
    for op in operateurs[:5]:
        print(f"  - {op.nom} ({op.type_operateur})")
    
    # V√©rifier qu'on a des commandes
    commandes = Commande.objects.all()
    if not commandes.exists():
        print("Aucune commande trouv√©e. Cr√©ation de quelques commandes de test...")
        creer_commandes_test()
        commandes = Commande.objects.all()
    
    print(f"\nCommandes disponibles: {commandes.count()}")
    
    # G√©n√©rer des op√©rations pour les 7 derniers jours
    debut_periode = timezone.now().date() - timedelta(days=7)
    fin_periode = timezone.now().date()
    
    print(f"G√©n√©ration d'op√©rations du {debut_periode} au {fin_periode}")
    
    # Nettoyer les anciennes op√©rations de test
    Operation.objects.filter(
        date_operation__gte=debut_periode,
        date_operation__lte=fin_periode
    ).delete()
    print("Anciennes op√©rations supprim√©es.")
    
    # Nettoyer les anciens √©tats de test
    EtatCommande.objects.filter(
        date_debut__gte=debut_periode,
        date_debut__lte=fin_periode
    ).delete()
    print("Anciens √©tats supprim√©s.")
    
    # Types d'op√©rations possibles (selon le mod√®le)
    types_operations = [
        'APPEL', 'Appel Whatsapp', 'Message Whatsapp', 
        'Vocal Whatsapp', 'ENVOI_SMS', 'REMPLACEMENT', 
        'MODIFICATION_PREPA'
    ]
    
    # √âtats possibles
    etats_possibles = ['Re√ßue', 'En traitement', 'Confirm√©e', 'En pr√©paration', 'Exp√©di√©e']
    
    operations_creees = 0
    etats_crees = 0
    
    # Pour chaque jour de la p√©riode
    for jour in range((fin_periode - debut_periode).days + 1):
        date_courante = debut_periode + timedelta(days=jour)
        
        # G√©n√©rer 10-30 op√©rations par jour
        nb_operations_jour = random.randint(10, 30)
        
        for _ in range(nb_operations_jour):
            # Choisir un op√©rateur al√©atoire
            operateur = random.choice(operateurs)
            
            # Choisir une commande al√©atoire
            commande = random.choice(commandes)
            
            # Cr√©er une op√©ration
            type_operation = random.choice(types_operations)
            heure_operation = random.randint(8, 18)
            minute_operation = random.randint(0, 59)
            
            date_operation = timezone.make_aware(
                datetime.combine(date_courante, datetime.min.time().replace(
                    hour=heure_operation, 
                    minute=minute_operation
                ))
            )
            
            operation = Operation.objects.create(
                commande=commande,
                operateur=operateur,
                type_operation=type_operation,
                date_operation=date_operation,
                conclusion=f"Op√©ration {type_operation} effectu√©e sur commande {commande.num_cmd}"
            )
            operations_creees += 1
            
            # 70% de chance de cr√©er un √©tat de commande correspondant
            if random.random() < 0.7:
                # Choisir un √©tat appropri√© selon le type d'op√©rateur
                if operateur.type_operateur == 'CONFIRMATION':
                    etats_candidats = ['Re√ßue', 'En traitement', 'Confirm√©e']
                elif operateur.type_operateur == 'LOGISTIQUE':
                    etats_candidats = ['En pr√©paration', 'Exp√©di√©e']
                elif operateur.type_operateur == 'PREPARATION':
                    etats_candidats = ['En pr√©paration']
                else:
                    etats_candidats = etats_possibles
                
                etat_nom = random.choice(etats_candidats)
                
                # V√©rifier si l'EnumEtatCmd existe
                try:
                    enum_etat = EnumEtatCmd.objects.get(libelle=etat_nom)
                except EnumEtatCmd.DoesNotExist:
                    # Cr√©er l'√©tat s'il n'existe pas
                    enum_etat = EnumEtatCmd.objects.create(
                        libelle=etat_nom,
                        code=etat_nom.upper().replace(' ', '_'),
                        description=f"√âtat {etat_nom}"
                    )
                
                # Cr√©er l'√©tat de commande
                etat = EtatCommande.objects.create(
                    commande=commande,
                    enum_etat=enum_etat,
                    operateur=operateur,
                    date_debut=date_operation,
                    commentaire=f"√âtat {etat_nom} par {operateur.nom}"
                )
                
                # 30% de chance de finir l'√©tat (pour simuler des √©tats termin√©s)
                if random.random() < 0.3:
                    duree_etat = random.randint(30, 240)  # 30 min √† 4h
                    etat.date_fin = date_operation + timedelta(minutes=duree_etat)
                    etat.save()
                
                etats_crees += 1
    
    print(f"\n‚úÖ Donn√©es g√©n√©r√©es avec succ√®s !")
    print(f"   - Op√©rations cr√©√©es: {operations_creees}")
    print(f"   - √âtats de commandes cr√©√©s: {etats_crees}")
    
    # Statistiques par op√©rateur
    print(f"\nüìä Statistiques par op√©rateur:")
    for operateur in operateurs:
        ops_count = Operation.objects.filter(
            operateur=operateur,
            date_operation__gte=debut_periode,
            date_operation__lte=fin_periode
        ).count()
        
        confirm_count = Operation.objects.filter(
            operateur=operateur,
            date_operation__gte=debut_periode,
            date_operation__lte=fin_periode,
            type_operation__icontains='Confirmation'
        ).count()
        
        print(f"   - {operateur.nom} ({operateur.type_operateur}): {ops_count} ops, {confirm_count} confirmations")

def creer_commandes_test():
    """Cr√©e quelques commandes de test si elles n'existent pas"""
    
    # V√©rifier qu'on a des clients
    if not Client.objects.exists():
        print("Cr√©ation de clients de test...")
        
        # Cr√©er une r√©gion et ville de test
        region, _ = Region.objects.get_or_create(
            nom_region='Test Region',
            defaults={'code_region': 'TEST'}
        )
        
        ville, _ = Ville.objects.get_or_create(
            nom_ville='Test Ville',
            defaults={'region': region, 'code_postal': '12345'}
        )
        
        # Cr√©er quelques clients
        for i in range(5):
            Client.objects.create(
                nom=f'Client Test {i+1}',
                prenom=f'Pr√©nom {i+1}',
                telephone=f'06000000{i:02d}',
                ville=ville
            )
    
    # Cr√©er quelques commandes
    clients = Client.objects.all()
    for i in range(10):
        date_cmd = timezone.now().date() - timedelta(days=random.randint(0, 30))
        
        commande = Commande.objects.create(
            num_cmd=f'CMD-TEST-{i+1:04d}',
            client=random.choice(clients),
            date_cmd=date_cmd,
            total_cmd=Decimal(str(random.randint(100, 1000))),
            statut_paiement='EN_ATTENTE'
        )
        
        print(f"Commande cr√©√©e: {commande.num_cmd}")

if __name__ == "__main__":
    generer_donnees_test_operateurs()
