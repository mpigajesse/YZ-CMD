"""
Script de correction de l'incoh√©rence entre les statistiques et le filtrage.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from commande.models import Commande, EtatCommande, Operation, EnumEtatCmd
from parametre.models import Operateur
from django.utils import timezone
from datetime import timedelta

def corriger_incoherence_filtrage():
    """
    Corrige l'incoh√©rence entre les statistiques et le filtrage.
    """
    print("üîß Correction de l'incoh√©rence de filtrage")
    print("=" * 60)
    
    # R√©cup√©rer un op√©rateur de pr√©paration
    operateur_prepa = Operateur.objects.filter(
        type_operateur='PREPARATION',
        actif=True
    ).first()
    
    if not operateur_prepa:
        print("‚ùå Aucun op√©rateur de pr√©paration actif trouv√©")
        return
    
    print(f"‚úÖ Op√©rateur de pr√©paration: {operateur_prepa.prenom} {operateur_prepa.nom}")
    
    # 1. Analyser le probl√®me dans l'interface de pr√©paration
    print("\n1. Analyse de l'interface de pr√©paration:")
    
    # R√©cup√©rer toutes les commandes affect√©es
    commandes_affectees = Commande.objects.filter(
        etats__enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).exclude(
        etats__enum_etat__libelle__in=['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']
    ).select_related('client', 'ville', 'ville__region').prefetch_related('etats').distinct()
    
    print(f"   - {commandes_affectees.count()} commandes affect√©es")
    
    # 2. Analyser chaque commande pour l'onglet "renvoyees_logistique"
    print("\n2. Analyse pour l'onglet 'Renvoy√©es par logistique':")
    
    commandes_renvoyees_logistique = []
    
    for cmd in commandes_affectees:
        print(f"\n   üì¶ Commande {cmd.id_yz} ({cmd.num_cmd}):")
        
        # V√©rifier les op√©rations de renvoi
        from commande.models import Operation
        operation_renvoi = Operation.objects.filter(
            commande=cmd,
            type_operation='RENVOI_PREPARATION'
        ).first()
        
        if operation_renvoi:
            print(f"      ‚úÖ Op√©ration de renvoi trouv√©e: {operation_renvoi.date_operation.strftime('%d/%m/%Y %H:%M')}")
            commandes_renvoyees_logistique.append(cmd)
            continue
        
        # V√©rifier l'√©tat pr√©c√©dent
        etats_commande = cmd.etats.all().order_by('date_debut')
        etat_actuel = None
        
        # Trouver l'√©tat actuel
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            # Trouver l'√©tat pr√©c√©dent
            etat_precedent = None
            for etat in reversed(etats_commande):
                if etat.date_fin and etat.date_fin < etat_actuel.date_debut:
                    if etat.enum_etat.libelle not in ['√Ä imprimer', 'En pr√©paration']:
                        etat_precedent = etat
                        break
            
            if etat_precedent:
                print(f"      ‚¨ÖÔ∏è √âtat pr√©c√©dent: {etat_precedent.enum_etat.libelle} ({etat_precedent.date_fin.strftime('%d/%m/%Y %H:%M')})")
                
                if etat_precedent.enum_etat.libelle == 'En cours de livraison':
                    print(f"      ‚úÖ Commande renvoy√©e depuis la logistique")
                    commandes_renvoyees_logistique.append(cmd)
                else:
                    print(f"      ‚ùå √âtat pr√©c√©dent: {etat_precedent.enum_etat.libelle} (pas 'En cours de livraison')")
            else:
                print(f"      ‚ùì Aucun √©tat pr√©c√©dent trouv√©")
    
    print(f"\n3. R√©sum√© pour 'Renvoy√©es par logistique':")
    print(f"   - Commandes identifi√©es: {len(commandes_renvoyees_logistique)}")
    
    # 4. Analyser l'interface logistique
    print("\n4. Analyse de l'interface logistique:")
    
    # R√©cup√©rer un op√©rateur logistique
    operateur_log = Operateur.objects.filter(
        type_operateur='LOGISTIQUE',
        actif=True
    ).first()
    
    if operateur_log:
        print(f"   - Op√©rateur logistique: {operateur_log.prenom} {operateur_log.nom}")
        
        # R√©cup√©rer les commandes renvoy√©es par cet op√©rateur
        commandes_renvoyees_log = Commande.objects.filter(
            operations__type_operation='RENVOI_PREPARATION',
            operations__operateur=operateur_log
        ).distinct()
        
        print(f"   - {commandes_renvoyees_log.count()} commandes renvoy√©es par la logistique")
        
        for cmd in commandes_renvoyees_log:
            operation = cmd.operations.filter(
                type_operation='RENVOI_PREPARATION',
                operateur=operateur_log
            ).first()
            
            if operation:
                print(f"      - Commande {cmd.id_yz} ({cmd.num_cmd}): {operation.date_operation.strftime('%d/%m/%Y %H:%M')}")
    
    # 5. Identifier les commandes manquantes
    print("\n5. Identification des commandes manquantes:")
    
    # V√©rifier les commandes qui devraient √™tre dans "renvoyees_logistique" mais ne sont pas compt√©es
    commandes_manquantes = []
    
    for cmd in commandes_affectees:
        # V√©rifier si c'est une commande de renvoi (livraison partielle)
        if cmd.num_cmd and cmd.num_cmd.startswith('RENVOI-'):
            continue  # C'est pour l'onglet "livrees_partiellement"
        
        # V√©rifier les op√©rations de renvoi
        operation_renvoi = Operation.objects.filter(
            commande=cmd,
            type_operation='RENVOI_PREPARATION'
        ).first()
        
        if operation_renvoi:
            if cmd not in commandes_renvoyees_logistique:
                commandes_manquantes.append(cmd)
            continue
        
        # V√©rifier l'√©tat pr√©c√©dent
        etats_commande = cmd.etats.all().order_by('date_debut')
        etat_actuel = None
        
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            for etat in reversed(etats_commande):
                if etat.date_fin and etat.date_fin < etat_actuel.date_debut:
                    if etat.enum_etat.libelle == 'En cours de livraison':
                        if cmd not in commandes_renvoyees_logistique:
                            commandes_manquantes.append(cmd)
                        break
    
    if commandes_manquantes:
        print(f"   ‚ö†Ô∏è {len(commandes_manquantes)} commandes manquantes dans 'renvoyees_logistique':")
        for cmd in commandes_manquantes:
            print(f"      - Commande {cmd.id_yz} ({cmd.num_cmd})")
    else:
        print("   ‚úÖ Aucune commande manquante")
    
    # 6. Proposer une correction
    print("\n6. Proposition de correction:")
    print("   Le probl√®me vient probablement du fait que les commandes sont affich√©es")
    print("   dans le tableau mais ne sont pas correctement filtr√©es pour l'onglet.")
    print("   Il faut v√©rifier la logique de filtrage dans la vue liste_prepa.")
    
    print("\n" + "=" * 60)
    print("‚úÖ ANALYSE TERMIN√âE")
    print("=" * 60)

if __name__ == "__main__":
    corriger_incoherence_filtrage() 