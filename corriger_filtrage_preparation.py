"""
Script de correction du filtrage dans l'interface de pr√©paration.
Corrige la logique pour exclure les commandes avec des √©tats ult√©rieurs probl√©matiques.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from commande.models import Commande, EtatCommande, Operation, EnumEtatCmd
from parametre.models import Operateur
from django.utils import timezone
from datetime import timedelta

def corriger_filtrage_preparation():
    """
    Corrige la logique de filtrage dans l'interface de pr√©paration.
    """
    print("üîß Correction du filtrage dans l'interface de pr√©paration")
    print("=" * 60)
    
    # R√©cup√©rer un op√©rateur de pr√©paration
    operateur_prepa = Operateur.objects.filter(
        type_operateur='PREPARATION',
        actif=True
    ).first()
    
    if not operateur_prepa:
        print("‚ùå Aucun op√©rateur de pr√©paration actif trouv√©")
        return
    
    print(f"‚úÖ Op√©rateur de pr√©paration: {operateur_prepa.prenom} {operateur_prepa.nom}")
    
    # 1. Identifier les commandes probl√©matiques
    print("\n1. Identification des commandes probl√©matiques:")
    
    commandes_affectees = Commande.objects.filter(
        etats__enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).select_related('client', 'ville', 'ville__region').prefetch_related('etats').distinct()
    
    commandes_problematiques = []
    
    for cmd in commandes_affectees:
        # R√©cup√©rer tous les √©tats de la commande
        etats_commande = cmd.etats.all().order_by('date_debut')
        
        # Trouver l'√©tat actuel
        etat_actuel = None
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            # V√©rifier s'il y a des √©tats ult√©rieurs probl√©matiques
            for etat in etats_commande:
                if (etat.date_debut > etat_actuel.date_debut and 
                    etat.enum_etat.libelle in ['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']):
                    commandes_problematiques.append({
                        'commande': cmd,
                        'etat_actuel': etat_actuel,
                        'etat_problematique': etat
                    })
                    break
    
    print(f"   - {len(commandes_problematiques)} commandes probl√©matiques identifi√©es")
    
    for pb in commandes_problematiques:
        cmd = pb['commande']
        etat_actuel = pb['etat_actuel']
        etat_problematique = pb['etat_problematique']
        
        print(f"   ‚ö†Ô∏è Commande {cmd.id_yz} ({cmd.num_cmd}):")
        print(f"      √âtat actuel: {etat_actuel.enum_etat.libelle}")
        print(f"      √âtat probl√©matique: {etat_problematique.enum_etat.libelle} ({etat_problematique.date_debut.strftime('%d/%m/%Y %H:%M')})")
    
    # 2. Corriger les √©tats probl√©matiques
    print("\n2. Correction des √©tats probl√©matiques:")
    
    for pb in commandes_problematiques:
        cmd = pb['commande']
        etat_actuel = pb['etat_actuel']
        etat_problematique = pb['etat_problematique']
        
        # Si l'√©tat probl√©matique est plus r√©cent que l'√©tat actuel, 
        # cela signifie que l'√©tat actuel ne devrait pas √™tre actif
        if etat_problematique.date_debut > etat_actuel.date_debut:
            print(f"   üîß Correction de la commande {cmd.id_yz}:")
            print(f"      Terminer l'√©tat '{etat_actuel.enum_etat.libelle}' car il y a un √©tat ult√©rieur '{etat_problematique.enum_etat.libelle}'")
            
            # Terminer l'√©tat actuel probl√©matique
            etat_actuel.date_fin = etat_problematique.date_debut
            etat_actuel.save()
            
            print(f"      ‚úÖ √âtat '{etat_actuel.enum_etat.libelle}' termin√© le {etat_actuel.date_fin.strftime('%d/%m/%Y %H:%M')}")
    
    # 3. V√©rifier les commandes de renvoi probl√©matiques
    print("\n3. V√©rification des commandes de renvoi probl√©matiques:")
    
    commandes_renvoi_problematiques = []
    
    commandes_renvoi = Commande.objects.filter(
        num_cmd__startswith='RENVOI-',
        etats__enum_etat__libelle='En pr√©paration',
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).select_related('client', 'ville', 'ville__region').prefetch_related('etats').distinct()
    
    for cmd in commandes_renvoi:
        # R√©cup√©rer tous les √©tats de la commande
        etats_commande = cmd.etats.all().order_by('date_debut')
        
        # Trouver l'√©tat actuel
        etat_actuel = None
        for etat in etats_commande:
            if etat.enum_etat.libelle == 'En pr√©paration' and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            # V√©rifier s'il y a des √©tats ult√©rieurs probl√©matiques
            for etat in etats_commande:
                if (etat.date_debut > etat_actuel.date_debut and 
                    etat.enum_etat.libelle in ['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']):
                    commandes_renvoi_problematiques.append({
                        'commande': cmd,
                        'etat_actuel': etat_actuel,
                        'etat_problematique': etat
                    })
                    break
    
    print(f"   - {len(commandes_renvoi_problematiques)} commandes de renvoi probl√©matiques identifi√©es")
    
    for pb in commandes_renvoi_problematiques:
        cmd = pb['commande']
        etat_actuel = pb['etat_actuel']
        etat_problematique = pb['etat_problematique']
        
        print(f"   ‚ö†Ô∏è Commande de renvoi {cmd.id_yz} ({cmd.num_cmd}):")
        print(f"      √âtat actuel: {etat_actuel.enum_etat.libelle}")
        print(f"      √âtat probl√©matique: {etat_problematique.enum_etat.libelle} ({etat_problematique.date_debut.strftime('%d/%m/%Y %H:%M')})")
        
        # Corriger l'√©tat probl√©matique
        if etat_problematique.date_debut > etat_actuel.date_debut:
            print(f"   üîß Correction de la commande de renvoi {cmd.id_yz}:")
            print(f"      Terminer l'√©tat '{etat_actuel.enum_etat.libelle}' car il y a un √©tat ult√©rieur '{etat_problematique.enum_etat.libelle}'")
            
            # Terminer l'√©tat actuel probl√©matique
            etat_actuel.date_fin = etat_problematique.date_debut
            etat_actuel.save()
            
            print(f"      ‚úÖ √âtat '{etat_actuel.enum_etat.libelle}' termin√© le {etat_actuel.date_fin.strftime('%d/%m/%Y %H:%M')}")
    
    # 4. V√©rification finale
    print("\n4. V√©rification finale:")
    
    commandes_finales = Commande.objects.filter(
        etats__enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).select_related('client', 'ville', 'ville__region').prefetch_related('etats').distinct()
    
    print(f"   - {commandes_finales.count()} commandes finales apr√®s correction")
    
    # V√©rifier qu'il n'y a plus de commandes probl√©matiques
    commandes_encore_problematiques = []
    
    for cmd in commandes_finales:
        etats_commande = cmd.etats.all().order_by('date_debut')
        etat_actuel = None
        
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            for etat in etats_commande:
                if (etat.date_debut > etat_actuel.date_debut and 
                    etat.enum_etat.libelle in ['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']):
                    commandes_encore_problematiques.append(cmd)
                    break
    
    if commandes_encore_problematiques:
        print(f"   ‚ö†Ô∏è {len(commandes_encore_problematiques)} commandes encore probl√©matiques:")
        for cmd in commandes_encore_problematiques:
            print(f"      - Commande {cmd.id_yz} ({cmd.num_cmd})")
    else:
        print("   ‚úÖ Aucune commande probl√©matique restante")
    
    print("\n" + "=" * 60)
    print("‚úÖ CORRECTION TERMIN√âE")
    print("=" * 60)

if __name__ == "__main__":
    corriger_filtrage_preparation() 