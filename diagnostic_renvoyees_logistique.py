#!/usr/bin/env python
"""
Script de diagnostic pour analyser les commandes renvoy√©es par logistique
et comprendre pourquoi il manque une commande.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from commande.models import Commande, EtatCommande, Operation
from parametre.models import Operateur
from django.db.models import Q

def diagnostic_renvoyees_logistique():
    """Diagnostic des commandes renvoy√©es par logistique"""
    print("üîç Diagnostic des commandes renvoy√©es par logistique")
    print("=" * 60)
    
    # 1. Trouver l'op√©rateur de pr√©paration
    operateur_prepa = Operateur.objects.filter(
        type_operateur='PREPARATION',
        actif=True
    ).first()
    
    if not operateur_prepa:
        print("‚ùå Aucun op√©rateur de pr√©paration trouv√©")
        return
    
    print(f"‚úÖ Op√©rateur de pr√©paration: {operateur_prepa.prenom} {operateur_prepa.nom}")
    
    # 2. Analyser toutes les commandes affect√©es √† cet op√©rateur
    print("\n1. Analyse des commandes affect√©es √† l'op√©rateur:")
    
    commandes_affectees = Commande.objects.filter(
        Q(etats__enum_etat__libelle='√Ä imprimer') | Q(etats__enum_etat__libelle='En pr√©paration'),
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).select_related('client', 'ville', 'ville__region').prefetch_related('paniers__article', 'etats').distinct()
    
    print(f"   - {commandes_affectees.count()} commandes affect√©es initialement")
    
    # 3. Analyser chaque commande pour d√©terminer si elle a √©t√© renvoy√©e par logistique
    commandes_renvoyees_logistique = []
    commandes_livrees_partiellement = []
    commandes_autres = []
    
    for cmd in commandes_affectees:
        print(f"\n   üì¶ Commande {cmd.id_yz} ({cmd.num_cmd}):")
        
        # Trouver l'√©tat actuel
        etat_actuel = None
        for etat in cmd.etats.all().order_by('date_debut'):
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if not etat_actuel:
            print(f"      ‚ùå Pas d'√©tat actuel trouv√©")
            continue
        
        print(f"      √âtat actuel: {etat_actuel.enum_etat.libelle} ({etat_actuel.date_debut.strftime('%d/%m/%Y %H:%M')})")
        
        # V√©rifier s'il y a des √©tats ult√©rieurs probl√©matiques
        a_etats_ult√©rieurs_problematiques = False
        for etat in cmd.etats.all().order_by('date_debut'):
            if (etat.date_debut > etat_actuel.date_debut and 
                etat.enum_etat.libelle in ['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']):
                a_etats_ult√©rieurs_problematiques = True
                print(f"      ‚ö†Ô∏è √âtat ult√©rieur probl√©matique: {etat.enum_etat.libelle} ({etat.date_debut.strftime('%d/%m/%Y %H:%M')})")
                break
        
        if a_etats_ult√©rieurs_problematiques:
            print(f"      ‚ùå Exclue √† cause d'√©tats ult√©rieurs probl√©matiques")
            continue
        
        # V√©rifier les op√©rations de renvoi
        operation_renvoi = Operation.objects.filter(
            commande=cmd,
            type_operation='RENVOI_PREPARATION'
        ).first()
        
        if operation_renvoi:
            print(f"      üîÑ Op√©ration de renvoi trouv√©e ({operation_renvoi.date_operation.strftime('%d/%m/%Y %H:%M')})")
            commandes_renvoyees_logistique.append(cmd)
            continue
        
        # V√©rifier l'historique des √©tats pour renvoi depuis livraison
        has_return_from_delivery_history = False
        for etat in cmd.etats.all().order_by('date_debut'):
            if (etat.enum_etat.libelle == 'En cours de livraison' and 
                etat.date_fin and 
                etat.date_fin < etat_actuel.date_debut):
                has_return_from_delivery_history = True
                print(f"      üöö Historique de renvoi depuis livraison trouv√© ({etat.date_debut.strftime('%d/%m/%Y %H:%M')})")
                break
        
        if has_return_from_delivery_history:
            commandes_renvoyees_logistique.append(cmd)
            continue
        
        # V√©rifier l'historique pour livraison partielle
        has_partially_delivered_history = False
        for etat in cmd.etats.all().order_by('date_debut'):
            if (etat.enum_etat.libelle == 'Livr√©e Partiellement' and 
                etat.date_fin and 
                etat.date_fin < etat_actuel.date_debut):
                has_partially_delivered_history = True
                print(f"      üì¶ Historique de livraison partielle trouv√© ({etat.date_debut.strftime('%d/%m/%Y %H:%M')})")
                break
        
        if has_partially_delivered_history:
            commandes_livrees_partiellement.append(cmd)
        else:
            commandes_autres.append(cmd)
            print(f"      ‚û°Ô∏è Commande normale")
    
    # 4. R√©sum√©
    print(f"\n2. R√©sum√© des cat√©gories:")
    print(f"   - Commandes renvoy√©es par logistique: {len(commandes_renvoyees_logistique)}")
    print(f"   - Commandes livr√©es partiellement: {len(commandes_livrees_partiellement)}")
    print(f"   - Autres commandes: {len(commandes_autres)}")
    
    # 5. D√©tails des commandes renvoy√©es par logistique
    print(f"\n3. D√©tails des commandes renvoy√©es par logistique:")
    for cmd in commandes_renvoyees_logistique:
        print(f"   üì¶ Commande {cmd.id_yz} ({cmd.num_cmd}): {cmd.client.prenom} {cmd.client.nom}")
        
        # V√©rifier les op√©rations de renvoi
        operation_renvoi = Operation.objects.filter(
            commande=cmd,
            type_operation='RENVOI_PREPARATION'
        ).first()
        
        if operation_renvoi:
            print(f"      üîÑ Op√©ration de renvoi: {operation_renvoi.date_operation.strftime('%d/%m/%Y %H:%M')}")
        else:
            # Chercher l'√©tat "En cours de livraison" pr√©c√©dent
            etat_livraison = None
            for etat in cmd.etats.all().order_by('date_debut'):
                if etat.enum_etat.libelle == 'En cours de livraison' and etat.date_fin:
                    etat_livraison = etat
                    break
            
            if etat_livraison:
                print(f"      üöö Renvoi depuis livraison: {etat_livraison.date_fin.strftime('%d/%m/%Y %H:%M')}")
    
    # 6. V√©rifier les commandes manquantes
    print(f"\n4. V√©rification des commandes manquantes:")
    
    # Compter les commandes dans l'interface logistique (approximation)
    commandes_logistique = Commande.objects.filter(
        etats__enum_etat__libelle='En pr√©paration',
        etats__date_fin__isnull=True
    ).distinct()
    
    print(f"   - Total commandes en pr√©paration: {commandes_logistique.count()}")
    print(f"   - Commandes renvoy√©es d√©tect√©es: {len(commandes_renvoyees_logistique)}")
    print(f"   - Diff√©rence: {commandes_logistique.count() - len(commandes_renvoyees_logistique)}")
    
    # 7. Analyser les commandes qui pourraient √™tre manqu√©es
    print(f"\n5. Analyse des commandes potentiellement manqu√©es:")
    
    for cmd in commandes_affectees:
        if cmd not in commandes_renvoyees_logistique and cmd not in commandes_livrees_partiellement:
            print(f"   üì¶ Commande {cmd.id_yz} ({cmd.num_cmd}): {cmd.client.prenom} {cmd.client.nom}")
            
            # Analyser l'historique des √©tats
            etats_commande = cmd.etats.all().order_by('date_debut')
            print(f"      Historique des √©tats:")
            for etat in etats_commande:
                status = "ACTIF" if not etat.date_fin else "TERMIN√â"
                print(f"        - {etat.enum_etat.libelle} ({etat.date_debut.strftime('%d/%m/%Y %H:%M')}) [{status}]")
    
    print(f"\n6. Conclusion:")
    print(f"   Le compteur devrait afficher {len(commandes_renvoyees_logistique)} commandes renvoy√©es par logistique")

if __name__ == '__main__':
    diagnostic_renvoyees_logistique() 