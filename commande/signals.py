from django.db.models.signals import post_save, pre_save
from django.db.models.signals import post_migrate
from django.dispatch import receiver
from .models import Commande, EnumEtatCmd


@receiver(pre_save, sender=Commande)
def detect_compteur_change(sender, instance, **kwargs):
    """
    D√©tecte les changements du compteur avant la sauvegarde
    et stocke l'ancienne valeur pour comparaison
    """
    if instance.pk:
        try:
            old_instance = Commande.objects.get(pk=instance.pk)
            instance._old_compteur = old_instance.compteur
        except Commande.DoesNotExist:
            instance._old_compteur = 0
    else:
        instance._old_compteur = 0


@receiver(post_save, sender=Commande)
def auto_recalcul_totaux_upsell(sender, instance, created, **kwargs):
    """
    Recalcule automatiquement les totaux selon la nouvelle logique upsell
    quand le compteur change d'√©tat (diff√©rent de z√©ro)
    """
    # √âviter la r√©cursion infinie
    if hasattr(instance, '_recalcul_en_cours'):
        return
    
    # V√©rifier si le compteur a chang√©
    old_compteur = getattr(instance, '_old_compteur', 0)
    nouveau_compteur = instance.compteur
    
    # D√©clencher le recalcul si :
    # 1. Le compteur a chang√© ET
    # 2. Le nouveau compteur n'est pas z√©ro
    if old_compteur != nouveau_compteur and nouveau_compteur != 0:
        # Marquer pour √©viter la r√©cursion
        instance._recalcul_en_cours = True
        
        try:
            # D√©clencher le recalcul automatique
            instance.recalculer_totaux_upsell()
            
            # Log pour le debugging (optionnel)
            print(f"üîÑ Recalcul automatique d√©clench√© pour commande {instance.id_yz}")
            print(f"   Compteur: {old_compteur} ‚Üí {nouveau_compteur}")
            print(f"   Nouveau total: {instance.total_cmd:.2f} DH")
            
        finally:
            # Nettoyer le flag
            delattr(instance, '_recalcul_en_cours') 


@receiver(post_migrate)
def ensure_default_enum_etats(sender, app_config, **kwargs):
    """
    Garantit la pr√©sence des √©tats par d√©faut apr√®s les migrations.
    Int√®gre tous les √©tats n√©cessaires directement dans le projet.
    """
    if app_config.name != 'commande':
        return

    default_states = [
        {'libelle': 'Non affect√©e', 'ordre': 1, 'couleur': '#6B7280'},
        {'libelle': 'Affect√©e', 'ordre': 2, 'couleur': '#3B82F6'},
        {'libelle': 'En cours de confirmation', 'ordre': 3, 'couleur': '#F59E0B'},
        {'libelle': 'Confirm√©e', 'ordre': 4, 'couleur': '#10B981'},
        {'libelle': 'Annul√©e', 'ordre': 5, 'couleur': '#EF4444'},
        {'libelle': 'Doublon', 'ordre': 6, 'couleur': '#EF4444'},
        {'libelle': 'Erron√©e', 'ordre': 7, 'couleur': '#F97316'},
        {'libelle': 'Retour Confirmation', 'ordre': 8, 'couleur': '#8B5CF6'},
        {'libelle': 'Livr√©e', 'ordre': 9, 'couleur': '#22C55E'},
        {'libelle': 'En pr√©paration', 'ordre': 10, 'couleur': '#06B6D4'},
        {'libelle': 'Pr√©par√©e', 'ordre': 11, 'couleur': '#14B8A6'},
        {'libelle': 'Collect√©e', 'ordre': 12, 'couleur': '#6366F1'},
        {'libelle': 'Emball√©e', 'ordre': 13, 'couleur': '#8B5CF6'},
        {'libelle': 'Valid√©e', 'ordre': 14, 'couleur': '#22C55E'},
    ]

    for state in default_states:
        EnumEtatCmd.objects.get_or_create(
            libelle=state['libelle'],
            defaults={'ordre': state['ordre'], 'couleur': state['couleur']}
        )