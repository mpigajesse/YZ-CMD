from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from .models import Commande


@receiver(pre_save, sender=Commande)
def detect_compteur_change(sender, instance, **kwargs):
    """
    D√©tecte les changements du compteur avant la sauvegarde
    et stocke l'ancienne valeur pour comparaison
    """
    if instance.pk:
        try:
            old_instance = Commande.objects.get(pk=instance.pk)
            instance._old_compteur = old_instance.compteur
        except Commande.DoesNotExist:
            instance._old_compteur = 0
    else:
        instance._old_compteur = 0


@receiver(post_save, sender=Commande)
def auto_recalcul_totaux_upsell(sender, instance, created, **kwargs):
    """
    Recalcule automatiquement les totaux selon la nouvelle logique upsell
    quand le compteur change d'√©tat (diff√©rent de z√©ro)
    """
    # √âviter la r√©cursion infinie
    if hasattr(instance, '_recalcul_en_cours'):
        return
    
    # V√©rifier si le compteur a chang√©
    old_compteur = getattr(instance, '_old_compteur', 0)
    nouveau_compteur = instance.compteur
    
    # D√©clencher le recalcul si :
    # 1. Le compteur a chang√© ET
    # 2. Le nouveau compteur n'est pas z√©ro
    if old_compteur != nouveau_compteur and nouveau_compteur != 0:
        # Marquer pour √©viter la r√©cursion
        instance._recalcul_en_cours = True
        
        try:
            # D√©clencher le recalcul automatique
            instance.recalculer_totaux_upsell()
            
            # Log pour le debugging (optionnel)
            print(f"üîÑ Recalcul automatique d√©clench√© pour commande {instance.id_yz}")
            print(f"   Compteur: {old_compteur} ‚Üí {nouveau_compteur}")
            print(f"   Nouveau total: {instance.total_cmd:.2f} DH")
            
        finally:
            # Nettoyer le flag
            delattr(instance, '_recalcul_en_cours') 