#!/usr/bin/env python
"""
Script pour supprimer toutes les migrations et recr√©er la base de donn√©es
"""
import os
import sys
import django
import shutil
from pathlib import Path

# Configuration Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.db import connection

def delete_all_migrations():
    """Supprime toutes les migrations de tous les apps"""
    print("üóëÔ∏è  Suppression de toutes les migrations...")
    
    apps = [
        'article', 'client', 'commande', 'livraison', 'parametre', 
        'operatConfirme', 'operatLogistic', 'synchronisation', 
        'Prepacommande', 'kpis', 'Superpreparation'
    ]
    
    for app in apps:
        migrations_dir = BASE_DIR / app / 'migrations'
        if migrations_dir.exists():
            print(f"   üìÅ Suppression des migrations de {app}...")
            for migration_file in migrations_dir.glob('*.py'):
                if migration_file.name != '__init__.py':
                    migration_file.unlink()
                    print(f"      ‚ùå Supprim√©: {migration_file.name}")
            
            # Supprimer __pycache__
            pycache_dir = migrations_dir / '__pycache__'
            if pycache_dir.exists():
                shutil.rmtree(pycache_dir)
                print(f"      ‚ùå Supprim√©: __pycache__")
    
    print("‚úÖ Toutes les migrations supprim√©es")

def recreate_init_files():
    """Recr√©e les fichiers __init__.py dans les dossiers migrations"""
    print("üìù Recr√©ation des fichiers __init__.py...")
    
    apps = [
        'article', 'client', 'commande', 'livraison', 'parametre', 
        'operatConfirme', 'operatLogistic', 'synchronisation', 
        'Prepacommande', 'kpis', 'Superpreparation'
    ]
    
    for app in apps:
        migrations_dir = BASE_DIR / app / 'migrations'
        if migrations_dir.exists():
            init_file = migrations_dir / '__init__.py'
            if not init_file.exists():
                init_file.touch()
                print(f"   ‚úÖ Cr√©√©: {app}/migrations/__init__.py")
    
    print("‚úÖ Fichiers __init__.py recr√©√©s")

def reset_database():
    """Supprime toutes les tables et recr√©e la base de donn√©es"""
    print("üóÑÔ∏è  R√©initialisation de la base de donn√©es...")
    
    with connection.cursor() as cursor:
        # D√©sactiver les contraintes de cl√©s √©trang√®res
        cursor.execute("SET session_replication_role = replica;")
        
        # R√©cup√©rer TOUTES les tables (y compris Django)
        cursor.execute("""
            SELECT tablename FROM pg_tables 
            WHERE schemaname = 'public'
        """)
        tables = [row[0] for row in cursor.fetchall()]
        
        # Supprimer toutes les tables
        for table in tables:
            cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE;")
            print(f"   ‚ùå Supprim√©: {table}")
        
        # R√©activer les contraintes
        cursor.execute("SET session_replication_role = DEFAULT;")
    
    print("‚úÖ Base de donn√©es r√©initialis√©e")

def main():
    print("=" * 60)
    print("üîÑ SCRIPT DE R√âINITIALISATION COMPL√àTE")
    print("=" * 60)
    
    # Demander confirmation
    response = input("\n‚ö†Ô∏è  ATTENTION: Ce script va supprimer TOUTES les migrations et TOUTES les donn√©es de la base de donn√©es.\n√ätes-vous s√ªr de vouloir continuer ? (oui/non): ")
    
    if response.lower() != 'oui':
        print("‚ùå Op√©ration annul√©e")
        return
    
    try:
        # √âtape 1: Supprimer toutes les migrations
        delete_all_migrations()
        
        # √âtape 2: Recr√©er les fichiers __init__.py
        recreate_init_files()
        
        # √âtape 3: R√©initialiser la base de donn√©es
        reset_database()
        
        print("\n" + "=" * 60)
        print("‚úÖ R√âINITIALISATION TERMIN√âE AVEC SUCC√àS")
        print("=" * 60)
        print("\nüìã Prochaines √©tapes:")
        print("1. python manage.py makemigrations")
        print("2. python manage.py migrate")
        print("3. python manage.py createsuperuser")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR: {str(e)}")
        return

if __name__ == "__main__":
    main()
