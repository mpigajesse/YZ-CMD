"""
Script pour v√©rifier pourquoi les commandes renvoy√©es par la logistique ne s'affichent pas.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from commande.models import Commande, EtatCommande, Operation, EnumEtatCmd
from parametre.models import Operateur
from django.utils import timezone
from datetime import timedelta

def verifier_commandes_renvoyees():
    """
    V√©rifie pourquoi les commandes renvoy√©es par la logistique ne s'affichent pas.
    """
    print("üîç V√©rification des commandes renvoy√©es par la logistique")
    print("=" * 60)
    
    # R√©cup√©rer un op√©rateur de pr√©paration
    operateur_prepa = Operateur.objects.filter(
        type_operateur='PREPARATION',
        actif=True
    ).first()
    
    if not operateur_prepa:
        print("‚ùå Aucun op√©rateur de pr√©paration actif trouv√©")
        return
    
    print(f"‚úÖ Op√©rateur de pr√©paration: {operateur_prepa.prenom} {operateur_prepa.nom}")
    
    # 1. V√©rifier toutes les op√©rations de renvoi
    print("\n1. V√©rification de toutes les op√©rations de renvoi:")
    
    operations_renvoi = Operation.objects.filter(
        type_operation='RENVOI_PREPARATION'
    ).select_related('commande', 'operateur').order_by('-date_operation')
    
    print(f"   - {operations_renvoi.count()} op√©rations de renvoi trouv√©es")
    
    for op in operations_renvoi:
        print(f"   üì¶ Op√©ration {op.id}:")
        print(f"      Commande: {op.commande.id_yz} ({op.commande.num_cmd})")
        print(f"      Op√©rateur: {op.operateur.prenom} {op.operateur.nom} ({op.operateur.type_operateur})")
        print(f"      Date: {op.date_operation.strftime('%d/%m/%Y %H:%M')}")
        
        # V√©rifier si cette commande est affect√©e √† l'op√©rateur de pr√©paration
        etat_actuel = op.commande.etats.filter(
            enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
            operateur=operateur_prepa,
            date_fin__isnull=True
        ).first()
        
        if etat_actuel:
            print(f"      ‚úÖ Affect√©e √† {operateur_prepa.prenom}")
        else:
            print(f"      ‚ùå Pas affect√©e √† {operateur_prepa.prenom}")
    
    # 2. V√©rifier les commandes avec √©tat pr√©c√©dent "En cours de livraison"
    print("\n2. V√©rification des commandes avec √©tat pr√©c√©dent 'En cours de livraison':")
    
    commandes_affectees = Commande.objects.filter(
        etats__enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).exclude(
        etats__enum_etat__libelle__in=['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']
    ).select_related('client', 'ville', 'ville__region').prefetch_related('etats').distinct()
    
    commandes_avec_etat_precedent_livraison = []
    
    for cmd in commandes_affectees:
        etats_commande = cmd.etats.all().order_by('date_debut')
        etat_actuel = None
        
        # Trouver l'√©tat actuel
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            # Trouver l'√©tat pr√©c√©dent
            for etat in reversed(etats_commande):
                if etat.date_fin and etat.date_fin < etat_actuel.date_debut:
                    if etat.enum_etat.libelle == 'En cours de livraison':
                        commandes_avec_etat_precedent_livraison.append({
                            'commande': cmd,
                            'etat_actuel': etat_actuel,
                            'etat_precedent': etat
                        })
                        break
    
    print(f"   - {len(commandes_avec_etat_precedent_livraison)} commandes avec √©tat pr√©c√©dent 'En cours de livraison'")
    
    for item in commandes_avec_etat_precedent_livraison:
        cmd = item['commande']
        etat_actuel = item['etat_actuel']
        etat_precedent = item['etat_precedent']
        
        print(f"   üì¶ Commande {cmd.id_yz} ({cmd.num_cmd}):")
        print(f"      √âtat actuel: {etat_actuel.enum_etat.libelle} ({etat_actuel.date_debut.strftime('%d/%m/%Y %H:%M')})")
        print(f"      √âtat pr√©c√©dent: {etat_precedent.enum_etat.libelle} ({etat_precedent.date_fin.strftime('%d/%m/%Y %H:%M')})")
        
        # V√©rifier si cette commande a des √©tats ult√©rieurs probl√©matiques
        a_etats_ult√©rieurs_problematiques = False
        for etat in etats_commande:
            if (etat.date_debut > etat_actuel.date_debut and 
                etat.enum_etat.libelle in ['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']):
                a_etats_ult√©rieurs_problematiques = True
                print(f"      ‚ö†Ô∏è √âtat ult√©rieur probl√©matique: {etat.enum_etat.libelle} ({etat.date_debut.strftime('%d/%m/%Y %H:%M')})")
                break
        
        if not a_etats_ult√©rieurs_problematiques:
            print(f"      ‚úÖ Devrait appara√Ætre dans 'Renvoy√©es par logistique'")
        else:
            print(f"      ‚ùå Ne devrait PAS appara√Ætre (√©tats ult√©rieurs probl√©matiques)")
    
    # 3. V√©rifier les commandes qui devraient √™tre dans "renvoyees_logistique"
    print("\n3. Commandes qui devraient √™tre dans 'Renvoy√©es par logistique':")
    
    commandes_renvoyees_logistique = []
    
    for cmd in commandes_affectees:
        # V√©rifier les op√©rations de renvoi
        operation_renvoi = Operation.objects.filter(
            commande=cmd,
            type_operation='RENVOI_PREPARATION'
        ).first()
        
        if operation_renvoi:
            commandes_renvoyees_logistique.append({
                'commande': cmd,
                'type': 'operation',
                'operation': operation_renvoi
            })
            continue
        
        # V√©rifier l'√©tat pr√©c√©dent
        etats_commande = cmd.etats.all().order_by('date_debut')
        etat_actuel = None
        
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            # V√©rifier s'il y a des √©tats ult√©rieurs probl√©matiques
            a_etats_ult√©rieurs_problematiques = False
            for etat in etats_commande:
                if (etat.date_debut > etat_actuel.date_debut and 
                    etat.enum_etat.libelle in ['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']):
                    a_etats_ult√©rieurs_problematiques = True
                    break
            
            if not a_etats_ult√©rieurs_problematiques:
                # Trouver l'√©tat pr√©c√©dent
                for etat in reversed(etats_commande):
                    if etat.date_fin and etat.date_fin < etat_actuel.date_debut:
                        if etat.enum_etat.libelle == 'En cours de livraison':
                            commandes_renvoyees_logistique.append({
                                'commande': cmd,
                                'type': 'etat_precedent',
                                'etat_precedent': etat
                            })
                            break
    
    print(f"   - {len(commandes_renvoyees_logistique)} commandes identifi√©es")
    
    for item in commandes_renvoyees_logistique:
        cmd = item['commande']
        type_renvoi = item['type']
        
        print(f"   üì¶ Commande {cmd.id_yz} ({cmd.num_cmd}):")
        if type_renvoi == 'operation':
            operation = item['operation']
            print(f"      ‚úÖ Op√©ration de renvoi: {operation.date_operation.strftime('%d/%m/%Y %H:%M')}")
        elif type_renvoi == 'etat_precedent':
            etat_precedent = item['etat_precedent']
            print(f"      ‚úÖ √âtat pr√©c√©dent: {etat_precedent.enum_etat.libelle} ({etat_precedent.date_fin.strftime('%d/%m/%Y %H:%M')})")
    
    # 4. Conclusion
    print(f"\n4. Conclusion:")
    if commandes_renvoyees_logistique:
        print(f"   ‚úÖ {len(commandes_renvoyees_logistique)} commandes devraient appara√Ætre dans 'Renvoy√©es par logistique'")
        print(f"   Le probl√®me vient probablement de la logique de filtrage dans la vue.")
    else:
        print(f"   ‚ùå Aucune commande identifi√©e comme renvoy√©e par la logistique")
        print(f"   Cela peut √™tre normal si aucune commande n'a √©t√© renvoy√©e vers cet op√©rateur.")
    
    print("\n" + "=" * 60)
    print("‚úÖ V√âRIFICATION TERMIN√âE")
    print("=" * 60)

if __name__ == "__main__":
    verifier_commandes_renvoyees() 