#!/usr/bin/env python
"""
Script complet pour peupler toutes les tables avec des donn√©es de test
pour valider les onglets Vue G√©n√©rale, Ventes et Clients
"""

import os
import sys
import django
from datetime import datetime, timedelta
from django.utils import timezone
from decimal import Decimal
import random

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
django.setup()

from django.contrib.auth.models import User
from client.models import Client
from commande.models import Commande, Panier, EtatCommande, EnumEtatCmd
from article.models import Article
from parametre.models import Ville, Operateur, Region

def create_comprehensive_test_data():
    print("üöÄ PEUPLEMENT COMPLET DES DONN√âES DE TEST")
    print("=" * 60)
    
    # Nettoyer les donn√©es existantes    print("\nüóëÔ∏è Nettoyage des donn√©es existantes...")
    Panier.objects.all().delete()
    EtatCommande.objects.all().delete()
    Commande.objects.all().delete()
    Client.objects.all().delete()
    Article.objects.all().delete()
    Operateur.objects.all().delete()
    # Supprimer les utilisateurs de test (sauf admin)
    User.objects.exclude(is_superuser=True).delete()
    Ville.objects.all().delete()
    Region.objects.all().delete()
    
    print("‚úÖ Donn√©es supprim√©es")
    
    # 1. CR√âER LES R√âGIONS ET VILLES
    print("\n1Ô∏è‚É£ Cr√©ation des r√©gions et villes...")
    
    regions_data = [
        {'nom_region': 'Casablanca-Settat', 'villes': ['Casablanca', 'Settat', 'Berrechid']},
        {'nom_region': 'Rabat-Sal√©-K√©nitra', 'villes': ['Rabat', 'Sal√©', 'K√©nitra']},
        {'nom_region': 'Marrakech-Safi', 'villes': ['Marrakech', 'Safi', 'Essaouira']},
        {'nom_region': 'F√®s-Mekn√®s', 'villes': ['F√®s', 'Mekn√®s', 'Ifrane']},
    ]
    
    villes_created = []
    for region_data in regions_data:
        region = Region.objects.create(nom_region=region_data['nom_region'])
        for ville_nom in region_data['villes']:
            ville = Ville.objects.create(
                nom=ville_nom, 
                region=region,
                frais_livraison=random.uniform(5.0, 15.0),  # Frais de livraison al√©atoires
                frequence_livraison=random.choice(['Quotidienne', 'Bi-quotidienne', 'Hebdomadaire'])
            )
            villes_created.append(ville)
            print(f"   ‚úÖ {ville_nom} ({region.nom_region})")
      # 2. CR√âER LES OP√âRATEURS
    print("\n2Ô∏è‚É£ Cr√©ation des op√©rateurs...")
    
    operateurs_data = [
        {'nom': 'Alami', 'prenom': 'Hassan', 'telephone': '0661234567', 'username': 'h.alami'},
        {'nom': 'Bennani', 'prenom': 'Fatima', 'telephone': '0662345678', 'username': 'f.bennani'},
        {'nom': 'Chraibi', 'prenom': 'Ahmed', 'telephone': '0663456789', 'username': 'a.chraibi'},
        {'nom': 'Douiri', 'prenom': 'Khadija', 'telephone': '0664567890', 'username': 'k.douiri'},
    ]
    
    operateurs_created = []
    for op_data in operateurs_data:
        # Cr√©er d'abord l'utilisateur Django
        user = User.objects.create_user(
            username=op_data['username'],
            email=f"{op_data['username']}@yoozak.com",
            password='password123'
        )
        
        # Puis cr√©er l'op√©rateur
        operateur = Operateur.objects.create(
            user=user,
            nom=op_data['nom'],
            prenom=op_data['prenom'],
            mail=f"{op_data['username']}@yoozak.com",
            telephone=op_data['telephone'],
            type_operateur='CONFIRMATION'
        )
        operateurs_created.append(operateur)
        print(f"   ‚úÖ {operateur.prenom} {operateur.nom} ({user.username})")
    
    # 3. CR√âER LES ARTICLES (CHAUSSURES)
    print("\n3Ô∏è‚É£ Cr√©ation des articles (chaussures)...")
    articles_data = [
        {'nom': 'Sneakers Classic White', 'reference': 'SNK001', 'couleur': 'Blanc', 'pointure': '42', 'categorie': 'Sneakers', 'prix_unitaire': 299.00, 'qte_disponible': 50},
        {'nom': 'Boots Leather Brown', 'reference': 'BOT001', 'couleur': 'Marron', 'pointure': '41', 'categorie': 'Boots', 'prix_unitaire': 459.00, 'qte_disponible': 30},
        {'nom': 'Sandales Summer Blue', 'reference': 'SAN001', 'couleur': 'Bleu', 'pointure': '39', 'categorie': 'Sandales', 'prix_unitaire': 189.00, 'qte_disponible': 80},
        {'nom': 'Escarpins Elegant Black', 'reference': 'ESC001', 'couleur': 'Noir', 'pointure': '38', 'categorie': 'Escarpins', 'prix_unitaire': 399.00, 'qte_disponible': 25},
        {'nom': 'Baskets Sport Red', 'reference': 'BAS001', 'couleur': 'Rouge', 'pointure': '43', 'categorie': 'Baskets', 'prix_unitaire': 249.00, 'qte_disponible': 60},
        {'nom': 'Mocassins Luxury Tan', 'reference': 'MOC001', 'couleur': 'Tan', 'pointure': '40', 'categorie': 'Mocassins', 'prix_unitaire': 549.00, 'qte_disponible': 20},
        {'nom': 'Ballerines Soft Pink', 'reference': 'BAL001', 'couleur': 'Rose', 'pointure': '37', 'categorie': 'Ballerines', 'prix_unitaire': 179.00, 'qte_disponible': 40},
        {'nom': 'Chaussures Business Gray', 'reference': 'BUS001', 'couleur': 'Gris', 'pointure': '44', 'categorie': 'Business', 'prix_unitaire': 429.00, 'qte_disponible': 35},
    ]
    
    articles_created = []
    for art_data in articles_data:
        article = Article.objects.create(**art_data)
        articles_created.append(article)
        print(f"   ‚úÖ {article.nom} - {article.prix_unitaire} DH (Stock: {article.qte_disponible})")
    
    # 4. CR√âER LES CLIENTS
    print("\n4Ô∏è‚É£ Cr√©ation des clients...")
    
    clients_data = [
        {'nom': 'Benjelloun', 'prenom': 'Youssef', 'numero_tel': '0661111111', 'email': 'youssef.b@email.com'},
        {'nom': 'El Mansouri', 'prenom': 'Aicha', 'numero_tel': '0662222222', 'email': 'aicha.m@email.com'},
        {'nom': 'Tazi', 'prenom': 'Omar', 'numero_tel': '0663333333', 'email': 'omar.t@email.com'},
        {'nom': 'Lahlou', 'prenom': 'Zineb', 'numero_tel': '0664444444', 'email': 'zineb.l@email.com'},
        {'nom': 'Fassi', 'prenom': 'Mehdi', 'numero_tel': '0665555555', 'email': 'mehdi.f@email.com'},
        {'nom': 'Berrada', 'prenom': 'Salma', 'numero_tel': '0666666666', 'email': 'salma.b@email.com'},
        {'nom': 'Zerouali', 'prenom': 'Karim', 'numero_tel': '0667777777', 'email': 'karim.z@email.com'},
        {'nom': 'Alaoui', 'prenom': 'Leila', 'numero_tel': '0668888888', 'email': 'leila.a@email.com'},
        {'nom': 'Chakib', 'prenom': 'Reda', 'numero_tel': '0669999999', 'email': 'reda.c@email.com'},
        {'nom': 'Benali', 'prenom': 'Nadia', 'numero_tel': '0660000000', 'email': 'nadia.b@email.com'},
    ]
    
    clients_created = []
    today = timezone.now().date()
    for i, client_data in enumerate(clients_data):
        # Cr√©er des dates de cr√©ation vari√©es (sur les 60 derniers jours)
        days_ago = random.randint(0, 60)
        creation_date = timezone.now() - timedelta(days=days_ago)
        
        client = Client.objects.create(**client_data)
        # Modifier la date de cr√©ation
        Client.objects.filter(id=client.id).update(date_creation=creation_date)
        
        clients_created.append(client)
        print(f"   ‚úÖ {client.prenom} {client.nom} (cr√©√© il y a {days_ago} jours)")
    
    # 5. CR√âER LES √âTATS DE COMMANDE
    print("\n5Ô∏è‚É£ Cr√©ation des √©tats de commande...")
    
    etats_data = [
        {'libelle': 'En attente', 'description': 'Commande en attente de traitement'},
        {'libelle': 'Confirm√©e', 'description': 'Commande confirm√©e par le client'},
        {'libelle': 'En pr√©paration', 'description': 'Commande en cours de pr√©paration'},
        {'libelle': 'Exp√©di√©e', 'description': 'Commande exp√©di√©e'},
        {'libelle': 'Livr√©e', 'description': 'Commande livr√©e au client'},
        {'libelle': 'Annul√©e', 'description': 'Commande annul√©e'},
        {'libelle': 'Retourn√©e', 'description': 'Commande retourn√©e par le client'},
    ]
    
    etats_created = []
    for etat_data in etats_data:
        try:
            etat = EnumEtatCmd.objects.create(**etat_data)
            etats_created.append(etat)
            print(f"   ‚úÖ {etat.libelle}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur cr√©ation √©tat {etat_data['libelle']}: {e}")
    
    # Si pas d'√©tats cr√©√©s, utiliser des valeurs par d√©faut
    if not etats_created:
        print("   ‚ö†Ô∏è Utilisation d'√©tats par d√©faut...")
        etats_created = list(EnumEtatCmd.objects.all())
    
    # 6. CR√âER LES COMMANDES AVEC HISTORIQUE
    print("\n6Ô∏è‚É£ Cr√©ation des commandes avec historique...")
    
    # G√©n√©rer commandes sur les 45 derniers jours
    commandes_created = []
    for i in range(25):  # 25 commandes
        # R√©partition temporelle r√©aliste
        if i < 8:  # 8 commandes r√©centes (0-7 jours)
            days_ago = random.randint(0, 7)
        elif i < 15:  # 7 commandes moyennes (8-20 jours)
            days_ago = random.randint(8, 20)
        else:  # 10 commandes anciennes (21-45 jours)
            days_ago = random.randint(21, 45)
        
        date_cmd = today - timedelta(days=days_ago)
        
        # S√©lectionner client et ville al√©atoirement
        client = random.choice(clients_created)
        ville = random.choice(villes_created)
        
        # Calculer total r√©aliste
        base_total = random.choice([199, 249, 299, 399, 459, 549, 629, 799])
        variation = random.uniform(0.8, 1.2)  # ¬±20% de variation
        total_cmd = round(base_total * variation, 2)
        
        commande = Commande.objects.create(
            client=client,
            total_cmd=total_cmd,
            date_cmd=date_cmd,
            ville=ville,
            adresse=f"{random.randint(1, 999)} Rue {random.choice(['Mohammed V', 'Hassan II', 'Al Massira', 'Atlas', 'Sebou'])}, {ville.nom}",
            is_upsell=random.choice([True, False]) if random.random() < 0.3 else False
        )
        
        commandes_created.append(commande)
        
        # Ajouter des √©tats √† la commande
        if etats_created:
            # D√©terminer l'√©tat final selon l'√¢ge de la commande
            if days_ago <= 3:  # Commandes r√©centes
                etat_final = random.choice(['Confirm√©e', 'En pr√©paration', 'Exp√©di√©e'])
            elif days_ago <= 10:  # Commandes moyennes
                etat_final = random.choice(['Exp√©di√©e', 'Livr√©e'])
            else:  # Commandes anciennes
                etat_final = random.choice(['Livr√©e', 'Livr√©e', 'Livr√©e', 'Annul√©e', 'Retourn√©e'])
            
            # Trouver l'√©tat correspondant
            try:
                etat_obj = next((e for e in etats_created if e.libelle == etat_final), etats_created[0])
                EtatCommande.objects.create(
                    commande=commande,
                    enum_etat=etat_obj,
                    date_debut=timezone.make_aware(datetime.combine(date_cmd, datetime.min.time()) + timedelta(hours=random.randint(1, 8))),
                    date_fin=None if etat_final in ['En pr√©paration', 'Exp√©di√©e'] else timezone.make_aware(datetime.combine(date_cmd, datetime.min.time()) + timedelta(hours=random.randint(12, 48)))
                )
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur cr√©ation √©tat pour commande {commande.id}: {e}")
        
        print(f"   ‚úÖ Commande {commande.num_cmd or commande.id} - {client.prenom} {client.nom} - {total_cmd} DH ({etat_final if 'etat_final' in locals() else 'Sans √©tat'})")
    
    # 7. CR√âER LES PANIERS (ARTICLES DANS COMMANDES)
    print("\n7Ô∏è‚É£ Cr√©ation des paniers (articles command√©s)...")
    
    paniers_created = 0
    for commande in commandes_created:
        # Nombre d'articles par commande (1-3)
        nb_articles = random.choices([1, 2, 3], weights=[60, 30, 10])[0]
        
        articles_choisis = random.sample(articles_created, min(nb_articles, len(articles_created)))
        
        for article in articles_choisis:
            quantite = random.choices([1, 2], weights=[80, 20])[0]
            sous_total = article.prix_unitaire * quantite
            
            Panier.objects.create(
                commande=commande,
                article=article,
                quantite=quantite,
                sous_total=sous_total
            )
            paniers_created += 1
    
    print(f"   ‚úÖ {paniers_created} articles ajout√©s aux paniers")
    
    # 8. STATISTIQUES FINALES
    print("\n" + "=" * 60)
    print("üìä R√âCAPITULATIF DES DONN√âES CR√â√âES")
    print("=" * 60)
    
    print(f"üèôÔ∏è R√©gions : {Region.objects.count()}")
    print(f"üåç Villes : {Ville.objects.count()}")
    print(f"üë®‚Äçüíº Op√©rateurs : {Operateur.objects.count()}")
    print(f"üëü Articles : {Article.objects.count()}")
    print(f"üë• Clients : {Client.objects.count()}")
    print(f"üì¶ Commandes : {Commande.objects.count()}")
    print(f"üõí Paniers : {Panier.objects.count()}")
    print(f"üìã √âtats commandes : {EtatCommande.objects.count()}")
    
    # Statistiques business
    total_ca = sum(float(c.total_cmd) for c in commandes_created)
    commandes_30j = Commande.objects.filter(date_cmd__gte=today - timedelta(days=30)).count()
    clients_actifs = len(set(Commande.objects.filter(date_cmd__gte=today - timedelta(days=30)).values_list('client_id', flat=True)))
    
    print(f"\nüí∞ CA Total : {total_ca:,.2f} DH")
    print(f"üìà Commandes 30j : {commandes_30j}")
    print(f"üë• Clients actifs 30j : {clients_actifs}")
    print(f"üéØ Panier moyen : {total_ca/len(commandes_created):,.2f} DH")
    
    print(f"\nüéâ DONN√âES DE TEST CR√â√âES AVEC SUCC√àS !")
    print(f"üåê Vous pouvez maintenant tester tous les onglets KPIs !")

if __name__ == '__main__':
    try:
        create_comprehensive_test_data()
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        import traceback
        traceback.print_exc()
