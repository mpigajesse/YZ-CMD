"""
Script de diagnostic sp√©cifique pour les commandes renvoy√©es par la logistique.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from commande.models import Commande, EtatCommande, Operation, EnumEtatCmd
from parametre.models import Operateur
from django.utils import timezone
from datetime import timedelta

def diagnostic_renvoi_logistique():
    """
    Diagnostic sp√©cifique pour les commandes renvoy√©es par la logistique.
    """
    print("üîç Diagnostic des commandes renvoy√©es par la logistique")
    print("=" * 60)
    
    # R√©cup√©rer un op√©rateur de pr√©paration
    operateur_prepa = Operateur.objects.filter(
        type_operateur='PREPARATION',
        actif=True
    ).first()
    
    if not operateur_prepa:
        print("‚ùå Aucun op√©rateur de pr√©paration actif trouv√©")
        return
    
    print(f"‚úÖ Op√©rateur de pr√©paration: {operateur_prepa.prenom} {operateur_prepa.nom}")
    
    # 1. R√©cup√©rer toutes les commandes affect√©es √† cet op√©rateur
    print("\n1. Commandes affect√©es √† l'op√©rateur:")
    
    commandes_affectees = Commande.objects.filter(
        etats__enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        etats__operateur=operateur_prepa,
        etats__date_fin__isnull=True
    ).exclude(
        etats__enum_etat__libelle__in=['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']
    ).select_related('client', 'ville', 'ville__region').prefetch_related('etats').distinct()
    
    print(f"   - {commandes_affectees.count()} commandes affect√©es")
    
    # 2. Analyser chaque commande pour voir si elle devrait √™tre dans "renvoyees_logistique"
    print("\n2. Analyse des commandes pour l'onglet 'Renvoy√©es par logistique':")
    
    commandes_renvoyees_logistique = []
    
    for cmd in commandes_affectees:
        print(f"\n   üì¶ Commande {cmd.id_yz} ({cmd.num_cmd}):")
        
        # R√©cup√©rer tous les √©tats de la commande
        etats_commande = cmd.etats.all().order_by('date_debut')
        
        # Trouver l'√©tat actuel
        etat_actuel = None
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            print(f"      √âtat actuel: {etat_actuel.enum_etat.libelle} ({etat_actuel.date_debut.strftime('%d/%m/%Y %H:%M')})")
            
            # V√©rifier les op√©rations de renvoi
            from commande.models import Operation
            operation_renvoi = Operation.objects.filter(
                commande=cmd,
                type_operation='RENVOI_PREPARATION'
            ).first()
            
            if operation_renvoi:
                print(f"      ‚úÖ Op√©ration de renvoi trouv√©e: {operation_renvoi.date_operation.strftime('%d/%m/%Y %H:%M')}")
                commandes_renvoyees_logistique.append(cmd)
                continue
            
            # V√©rifier l'√©tat pr√©c√©dent
            etat_precedent = None
            for etat in reversed(etats_commande):
                if etat.date_fin and etat.date_fin < etat_actuel.date_debut:
                    if etat.enum_etat.libelle not in ['√Ä imprimer', 'En pr√©paration']:
                        etat_precedent = etat
                        break
            
            if etat_precedent:
                print(f"      ‚¨ÖÔ∏è √âtat pr√©c√©dent: {etat_precedent.enum_etat.libelle} ({etat_precedent.date_fin.strftime('%d/%m/%Y %H:%M')})")
                
                if etat_precedent.enum_etat.libelle == 'En cours de livraison':
                    print(f"      ‚úÖ Commande renvoy√©e depuis la logistique")
                    commandes_renvoyees_logistique.append(cmd)
                else:
                    print(f"      ‚ùå √âtat pr√©c√©dent: {etat_precedent.enum_etat.libelle} (pas 'En cours de livraison')")
            else:
                print(f"      ‚ùì Aucun √©tat pr√©c√©dent trouv√©")
    
    print(f"\n3. R√©sum√©:")
    print(f"   - Commandes identifi√©es comme 'renvoy√©es par logistique': {len(commandes_renvoyees_logistique)}")
    
    # 4. Tester la logique de filtrage actuelle
    print("\n4. Test de la logique de filtrage actuelle:")
    
    commandes_filtrees = []
    for commande in commandes_affectees:
        from commande.models import Operation
        
        # V√©rifier que la commande n'a pas d'√©tats ult√©rieurs probl√©matiques
        etats_commande = commande.etats.all().order_by('date_debut')
        etat_actuel = None
        
        # Trouver l'√©tat actuel (En pr√©paration)
        for etat in etats_commande:
            if etat.enum_etat.libelle in ['√Ä imprimer', 'En pr√©paration'] and not etat.date_fin:
                etat_actuel = etat
                break
        
        if etat_actuel:
            # V√©rifier s'il y a des √©tats ult√©rieurs probl√©matiques
            a_etats_ult√©rieurs_problematiques = False
            for etat in etats_commande:
                if (etat.date_debut > etat_actuel.date_debut and 
                    etat.enum_etat.libelle in ['Livr√©e', 'Livr√©e Partiellement', 'Pr√©par√©e', 'En cours de livraison']):
                    a_etats_ult√©rieurs_problematiques = True
                    break
            
            if a_etats_ult√©rieurs_problematiques:
                print(f"   ‚ùå Commande {commande.id_yz}: Ignor√©e (√©tats ult√©rieurs probl√©matiques)")
                continue
            
            # V√©rifier les op√©rations de tra√ßabilit√©
            operation_renvoi = Operation.objects.filter(
                commande=commande,
                type_operation='RENVOI_PREPARATION'
            ).first()
            
            if operation_renvoi:
                print(f"   ‚úÖ Commande {commande.id_yz}: Ajout√©e (op√©ration de renvoi)")
                commandes_filtrees.append(commande)
                continue
            
            # V√©rifier l'historique des √©tats de la commande
            # Trouver l'√©tat pr√©c√©dent
            for etat in reversed(etats_commande):
                if etat.date_fin and etat.date_fin < etat_actuel.date_debut:
                    if etat.enum_etat.libelle == 'En cours de livraison':
                        print(f"   ‚úÖ Commande {commande.id_yz}: Ajout√©e (√©tat pr√©c√©dent: En cours de livraison)")
                        commandes_filtrees.append(commande)
                        break
                    else:
                        print(f"   ‚ùå Commande {commande.id_yz}: Ignor√©e (√©tat pr√©c√©dent: {etat.enum_etat.libelle})")
                        break
    
    print(f"\n5. R√©sultat du filtrage:")
    print(f"   - Commandes apr√®s filtrage: {len(commandes_filtrees)}")
    
    # 6. Comparaison
    print(f"\n6. Comparaison:")
    print(f"   - Commandes identifi√©es manuellement: {len(commandes_renvoyees_logistique)}")
    print(f"   - Commandes apr√®s filtrage automatique: {len(commandes_filtrees)}")
    
    if len(commandes_renvoyees_logistique) != len(commandes_filtrees):
        print(f"   ‚ö†Ô∏è Diff√©rence d√©tect√©e !")
        
        # Identifier les commandes manquantes
        commandes_manquantes = []
        for cmd in commandes_renvoyees_logistique:
            if cmd not in commandes_filtrees:
                commandes_manquantes.append(cmd)
        
        if commandes_manquantes:
            print(f"   - Commandes manquantes dans le filtrage:")
            for cmd in commandes_manquantes:
                print(f"     * Commande {cmd.id_yz} ({cmd.num_cmd})")
    
    print("\n" + "=" * 60)
    print("‚úÖ DIAGNOSTIC TERMIN√â")
    print("=" * 60)

if __name__ == "__main__":
    diagnostic_renvoi_logistique() 