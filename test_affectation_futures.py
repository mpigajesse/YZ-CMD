"""
Script de test pour v√©rifier que les futures affectations respectent les r√®gles du syst√®me.
√Ä ex√©cuter p√©riodiquement pour s'assurer de l'int√©grit√© du syst√®me.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from commande.models import Commande, EtatCommande, Operation
from parametre.models import Operateur
from django.utils import timezone
from datetime import timedelta

def test_affectations_futures():
    """
    Test complet du syst√®me d'affectation pour les futures commandes.
    """
    print("üîç Test du syst√®me d'affectation pour les futures commandes")
    print("=" * 60)
    
    # 1. V√©rifier les op√©rateurs de pr√©paration
    print("\n1. V√©rification des op√©rateurs de pr√©paration:")
    operateurs_prepa = Operateur.objects.filter(type_operateur='PREPARATION')
    print(f"   - {operateurs_prepa.count()} op√©rateurs de pr√©paration trouv√©s")
    
    for op in operateurs_prepa:
        status = "‚úÖ Actif" if op.actif else "‚ùå Inactif"
        print(f"   - {op.prenom} {op.nom}: {status}")
    
    # 2. V√©rifier les commandes actuellement en pr√©paration
    print("\n2. V√©rification des commandes en pr√©paration:")
    commandes_en_prepa = Commande.objects.filter(
        etats__enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        etats__date_fin__isnull=True
    ).distinct()
    
    print(f"   - {commandes_en_prepa.count()} commandes en pr√©paration")
    
    # 3. V√©rifier les affectations par op√©rateur
    print("\n3. R√©partition des commandes par op√©rateur:")
    for op in operateurs_prepa:
        nb_commandes = commandes_en_prepa.filter(
            etats__operateur=op,
            etats__date_fin__isnull=True
        ).distinct().count()
        print(f"   - {op.prenom} {op.nom}: {nb_commandes} commandes")
    
    # 4. V√©rifier les commandes renvoy√©es par la logistique
    print("\n4. V√©rification des commandes renvoy√©es par la logistique:")
    commandes_renvoyees = Commande.objects.filter(
        operations__type_operation='RENVOI_PREPARATION'
    ).distinct()
    
    print(f"   - {commandes_renvoyees.count()} commandes renvoy√©es par la logistique")
    
    for cmd in commandes_renvoyees[:5]:  # Afficher les 5 premi√®res
        etat_actuel = cmd.etats.filter(
            enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
            date_fin__isnull=True
        ).first()
        
        if etat_actuel:
            print(f"   - Commande {cmd.id_yz}: affect√©e √† {etat_actuel.operateur.prenom} {etat_actuel.operateur.nom}")
        else:
            print(f"   - Commande {cmd.id_yz}: ‚ùå Pas d'√©tat actuel")
    
    # 4.1. V√©rifier les commandes livr√©es partiellement
    print("\n4.1. V√©rification des commandes livr√©es partiellement:")
    commandes_livrees_partiellement = Commande.objects.filter(
        etats__enum_etat__libelle='Livr√©e Partiellement'
    ).distinct()
    
    print(f"   - {commandes_livrees_partiellement.count()} commandes livr√©es partiellement")
    
    for cmd in commandes_livrees_partiellement[:5]:  # Afficher les 5 premi√®res
        etat_actuel = cmd.etats.filter(
            enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
            date_fin__isnull=True
        ).first()
        
        if etat_actuel:
            print(f"   - Commande {cmd.id_yz}: affect√©e √† {etat_actuel.operateur.prenom} {etat_actuel.operateur.nom}")
        else:
            print(f"   - Commande {cmd.id_yz}: ‚ùå Pas d'√©tat actuel")
    
    # 4.2. V√©rifier les commandes de renvoi cr√©√©es lors de livraisons partielles
    print("\n4.2. V√©rification des commandes de renvoi (livraisons partielles):")
    commandes_renvoi = Commande.objects.filter(
        num_cmd__startswith='RENVOI-'
    ).distinct()
    
    print(f"   - {commandes_renvoi.count()} commandes de renvoi cr√©√©es")
    
    for cmd in commandes_renvoi[:5]:  # Afficher les 5 premi√®res
        etat_actuel = cmd.etats.filter(
            enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
            date_fin__isnull=True
        ).first()
        
        if etat_actuel:
            print(f"   - Commande {cmd.id_yz} ({cmd.num_cmd}): affect√©e √† {etat_actuel.operateur.prenom} {etat_actuel.operateur.nom}")
        else:
            print(f"   - Commande {cmd.id_yz} ({cmd.num_cmd}): ‚ùå Pas d'√©tat actuel")
    
    # 5. V√©rifier les anomalies d'affectation
    print("\n5. D√©tection des anomalies d'affectation:")
    
    # Commandes avec des √©tats cr√©√©s par des op√©rateurs incorrects
    etats_anormaux = EtatCommande.objects.filter(
        enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        operateur__type_operateur__in=['LOGISTIQUE', 'LIVRAISON', 'CONFIRMATION']
    )
    
    if etats_anormaux.exists():
        print(f"   - ‚ùå {etats_anormaux.count()} √©tats cr√©√©s par des op√©rateurs incorrects")
        for etat in etats_anormaux[:3]:
            print(f"     * Commande {etat.commande.id_yz}: {etat.operateur.nom_complet} ({etat.operateur.type_operateur})")
    else:
        print("   - ‚úÖ Aucun √©tat cr√©√© par des op√©rateurs incorrects")
    
    # Commandes affect√©es √† des op√©rateurs inactifs
    etats_inactifs = EtatCommande.objects.filter(
        enum_etat__libelle__in=['√Ä imprimer', 'En pr√©paration'],
        operateur__actif=False,
        date_fin__isnull=True
    )
    
    if etats_inactifs.exists():
        print(f"   - ‚ùå {etats_inactifs.count()} commandes affect√©es √† des op√©rateurs inactifs")
    else:
        print("   - ‚úÖ Aucune commande affect√©e √† des op√©rateurs inactifs")
    
    # 6. V√©rifier les anomalies de livraison partielle
    print("\n6. D√©tection des anomalies de livraison partielle:")
    try:
        from operatLogistic.views import surveiller_livraisons_partielles
        anomalies_livraison = surveiller_livraisons_partielles()
        
        if anomalies_livraison:
            print(f"   - {len(anomalies_livraison)} anomalies de livraison partielle d√©tect√©es:")
            for anomalie in anomalies_livraison[:5]:  # Afficher les 5 premi√®res
                print(f"     ‚ö†Ô∏è  {anomalie['message']}")
        else:
            print("   ‚úÖ Aucune anomalie de livraison partielle d√©tect√©e")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des livraisons partielles: {e}")
    
    # 7. Test de la logique de renvoi
    print("\n7. Test de la logique de renvoi:")
    
    # Simuler une commande qui a √©t√© pr√©par√©e par PrenomPO1
    commande_test = commandes_en_prepa.first()
    if commande_test:
        print(f"   - Test avec la commande {commande_test.id_yz}")
        
        # Chercher l'√©tat "En pr√©paration" pr√©c√©dent
        etat_preparation_precedent = commande_test.etats.filter(
            enum_etat__libelle='En pr√©paration',
            date_fin__isnull=False
        ).order_by('-date_fin').first()
        
        if etat_preparation_precedent:
            operateur_original = etat_preparation_precedent.operateur
            print(f"   - Op√©rateur original: {operateur_original.prenom} {operateur_original.nom}")
            print(f"   - Type: {operateur_original.type_operateur}")
            print(f"   - Actif: {operateur_original.actif}")
            
            if operateur_original.type_operateur == 'PREPARATION' and operateur_original.actif:
                print("   - ‚úÖ La logique de renvoi fonctionnerait correctement")
            else:
                print("   - ‚ùå La logique de renvoi utiliserait un op√©rateur de secours")
        else:
            print("   - ‚ö†Ô∏è  Aucun √©tat 'En pr√©paration' pr√©c√©dent trouv√©")
    
    print("\n" + "=" * 60)
    print("‚úÖ V√âRIFICATION TERMIN√âE - SYST√àME OP√âRATIONNEL")
    print("=" * 60)

if __name__ == "__main__":
    test_affectations_futures() 